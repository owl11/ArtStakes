{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "excludedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifactSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedArtifactSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "targetedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "testFuzz_check_highBalance_fails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "testFuzz_check_succeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405260008054600160ff19918216811790925560048054909116909117905534801561002d57600080fd5b5061195a8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637d4478861161008c578063b5508aa911610066578063b5508aa914610174578063ba414fa61461017c578063e20c9f7114610194578063fa7626d41461019c57600080fd5b80637d4478861461014457806385226c8114610157578063916a17c61461016c57600080fd5b80633f7286f4116100bd5780633f7286f41461011457806366d9a9a01461011c57806375a7b6201461013157600080fd5b80630a9254e4146100e45780631ed7831c146100ee5780633e5e3c231461010c575b600080fd5b6100ec6101a9565b005b6100f6610287565b6040516101039190611080565b60405180910390f35b6100f66102f6565b6100f6610363565b6101246103d0565b60405161010391906110da565b6100ec61013f3660046111d0565b6104e1565b6100ec6101523660046111d0565b610668565b61015f610877565b6040516101039190611293565b610124610947565b61015f610a4f565b610184610b1f565b6040519015158152602001610103565b6100f6610c7f565b6000546101849060ff1681565b6040516101b590611066565b604051809103906000f0801580156101d1573d6000803e3d6000fd5b50601b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560405161022390611073565b604051809103906000f08015801561023f573d6000803e3d6000fd5b50601c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6060600d8054806020026020016040519081016040528092919081815260200182805480156102ec57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575b5050505050905090565b6060600f8054806020026020016040519081016040528092919081815260200182805480156102ec5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575050505050905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156102ec5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575050505050905090565b60606012805480602002602001604051908101604052809291908181526020016000905b828210156104d857600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff1683526001810180548351818702810187019094528084529394919385830193928301828280156104c057602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161046d5790505b505050505081525050815260200190600101906103f4565b50505050905090565b60408051606081018252601c5473ffffffffffffffffffffffffffffffffffffffff9081168083526020830186905290841682840181905292517f060dac88000000000000000000000000000000000000000000000000000000008152600481019390935273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee602484015260448301859052909163060dac8890606401600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b5050601b5460408051855173ffffffffffffffffffffffffffffffffffffffff90811660208084019190915287015182840152918601518216606082015261066394509116915063c64b3bb5906080016040516020818303038152906040526040518263ffffffff1660e01b815260040161061b9190611313565b602060405180830381865afa158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c919061132d565b6000610cec565b505050565b60408051606081018252601c5473ffffffffffffffffffffffffffffffffffffffff9081168083526020830186905290841682840181905292517fb47064c8000000000000000000000000000000000000000000000000000000008152600481019390935273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60248401529091737109709ecfa91a80626ff3989d68f67f5b1dd12d91634c63e5629186919063b47064c890604401602060405180830381865afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610752919061134f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681529111600482015260240160006040518083038186803b1580156107a057600080fd5b505afa1580156107b4573d6000803e3d6000fd5b5050601b5460408051855173ffffffffffffffffffffffffffffffffffffffff90811660208084019190915287015182840152918601518216606082015261066394509116915063c64b3bb5906080016040516020818303038152906040526040518263ffffffff1660e01b815260040161082f9190611313565b602060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610870919061132d565b6001610cec565b60606011805480602002602001604051908101604052809291908181526020016000905b828210156104d85783829060005260206000200180546108ba90611368565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690611368565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b50505050508152602001906001019061089b565b60606013805480602002602001604051908101604052809291908181526020016000905b828210156104d857600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610a3757602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109e45790505b5050505050815250508152602001906001019061096b565b60606010805480602002602001604051908101604052809291908181526020016000905b828210156104d8578382906000526020600020018054610a9290611368565b80601f0160208091040260200160405190810160405280929190818152602001828054610abe90611368565b8015610b0b5780601f10610ae057610100808354040283529160200191610b0b565b820191906000526020600020905b815481529060010190602001808311610aee57829003601f168201915b505050505081526020019060010190610a73565b60008054610100900460ff1615610b3f5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c7a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c6564000000000000000000000000000000000000000000000000000082840152825180830384018152606083019093526000929091610be4917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113bb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610c1c91611403565b6000604051808303816000865af19150503d8060008114610c59576040519150601f19603f3d011682016040523d82523d6000602084013e610c5e565b606091505b5091505080806020019051810190610c76919061132d565b9150505b919050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156102ec5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575050505050905090565b80151582151514610ee6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610d7c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f60408201527f6c5d000000000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382610de5576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610e1c565b6040518060400160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b604051610e29919061141f565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381610e92576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610ec9565b6040518060400160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b604051610ed69190611466565b60405180910390a1610ee6610eea565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110385760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000009282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610fb992916020016113bb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ff191611403565b6000604051808303816000865af19150503d806000811461102e576040519150601f19603f3d011682016040523d82523d6000602084013e611033565b606091505b505050505b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b610303806114ae83390190565b61019d806117b183390190565b6020808252825182820181905260009190848201906040850190845b818110156110ce57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161109c565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156111c1578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805173ffffffffffffffffffffffffffffffffffffffff168552880151888501889052805188860181905290890190839060608701905b808310156111ac5783517fffffffff00000000000000000000000000000000000000000000000000000000168252928b019260019290920191908b019061116a565b50978a01979550505091870191600101611102565b50919998505050505050505050565b600080604083850312156111e357600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff8116811461120e57600080fd5b809150509250929050565b60005b8381101561123457818101518382015260200161121c565b83811115611243576000848401525b50505050565b60008151808452611261816020860160208601611219565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611306577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526112f4858351611249565b945092850192908501906001016112ba565b5092979650505050505050565b6020815260006113266020830184611249565b9392505050565b60006020828403121561133f57600080fd5b8151801515811461132657600080fd5b60006020828403121561136157600080fd5b5051919050565b600181811c9082168061137c57607f821691505b6020821081036113b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7fffffffff0000000000000000000000000000000000000000000000000000000083168152600082516113f5816004850160208701611219565b919091016004019392505050565b60008251611415818460208701611219565b9190910192915050565b60408152600a60408201527f2020202020204c6566740000000000000000000000000000000000000000000060608201526080602082015260006113266080830184611249565b60408152600a60408201527f20202020205269676874000000000000000000000000000000000000000000006060820152608060208201526000611326608083018461124956fe608060405234801561001057600080fd5b506102e3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c64b3bb514610030575b600080fd5b61004361003e366004610160565b610057565b604051901515815260200160405180910390f35b6000808280602001905181019061006e9190610258565b6020810151815160408084015190517fb47064c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6024820152939450919291169063b47064c890604401602060405180830381865afa158015610105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012991906102bd565b109392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561017257600080fd5b813567ffffffffffffffff8082111561018a57600080fd5b818401915084601f83011261019e57600080fd5b8135818111156101b0576101b0610131565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101f6576101f6610131565b8160405282815287602084870101111561020f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b805173ffffffffffffffffffffffffffffffffffffffff8116811461025357600080fd5b919050565b60006060828403121561026a57600080fd5b6040516060810181811067ffffffffffffffff8211171561028d5761028d610131565b6040526102998361022f565b8152602083015160208201526102b16040840161022f565b60408201529392505050565b6000602082840312156102cf57600080fd5b505191905056fea164736f6c634300080f000a608060405234801561001057600080fd5b5061017d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063060dac881461003b578063b47064c814610081575b600080fd5b61007f610049366004610101565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832095909416825293909352912055565b005b6100c661008f36600461013d565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152602081815260408083209386168352929052205492915050565b60405190815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100fc57600080fd5b919050565b60008060006060848603121561011657600080fd5b61011f846100d8565b925061012d602085016100d8565b9150604084013590509250925092565b6000806040838503121561015057600080fd5b610159836100d8565b9150610167602084016100d8565b9050925092905056fea164736f6c634300080f000aa164736f6c634300080f000a",
    "sourceMap": "962:1807:131:-:0;;;1572:26:266;;;1594:4;-1:-1:-1;;1572:26:266;;;;;;;;3161:44:269;;;;;;;;;;;962:1807:131;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80637d4478861161008c578063b5508aa911610066578063b5508aa914610174578063ba414fa61461017c578063e20c9f7114610194578063fa7626d41461019c57600080fd5b80637d4478861461014457806385226c8114610157578063916a17c61461016c57600080fd5b80633f7286f4116100bd5780633f7286f41461011457806366d9a9a01461011c57806375a7b6201461013157600080fd5b80630a9254e4146100e45780631ed7831c146100ee5780633e5e3c231461010c575b600080fd5b6100ec6101a9565b005b6100f6610287565b6040516101039190611080565b60405180910390f35b6100f66102f6565b6100f6610363565b6101246103d0565b60405161010391906110da565b6100ec61013f3660046111d0565b6104e1565b6100ec6101523660046111d0565b610668565b61015f610877565b6040516101039190611293565b610124610947565b61015f610a4f565b610184610b1f565b6040519015158152602001610103565b6100f6610c7f565b6000546101849060ff1681565b6040516101b590611066565b604051809103906000f0801580156101d1573d6000803e3d6000fd5b50601b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905560405161022390611073565b604051809103906000f08015801561023f573d6000803e3d6000fd5b50601c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6060600d8054806020026020016040519081016040528092919081815260200182805480156102ec57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575b5050505050905090565b6060600f8054806020026020016040519081016040528092919081815260200182805480156102ec5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575050505050905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156102ec5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575050505050905090565b60606012805480602002602001604051908101604052809291908181526020016000905b828210156104d857600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff1683526001810180548351818702810187019094528084529394919385830193928301828280156104c057602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161046d5790505b505050505081525050815260200190600101906103f4565b50505050905090565b60408051606081018252601c5473ffffffffffffffffffffffffffffffffffffffff9081168083526020830186905290841682840181905292517f060dac88000000000000000000000000000000000000000000000000000000008152600481019390935273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee602484015260448301859052909163060dac8890606401600060405180830381600087803b15801561058c57600080fd5b505af11580156105a0573d6000803e3d6000fd5b5050601b5460408051855173ffffffffffffffffffffffffffffffffffffffff90811660208084019190915287015182840152918601518216606082015261066394509116915063c64b3bb5906080016040516020818303038152906040526040518263ffffffff1660e01b815260040161061b9190611313565b602060405180830381865afa158015610638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c919061132d565b6000610cec565b505050565b60408051606081018252601c5473ffffffffffffffffffffffffffffffffffffffff9081168083526020830186905290841682840181905292517fb47064c8000000000000000000000000000000000000000000000000000000008152600481019390935273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60248401529091737109709ecfa91a80626ff3989d68f67f5b1dd12d91634c63e5629186919063b47064c890604401602060405180830381865afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610752919061134f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681529111600482015260240160006040518083038186803b1580156107a057600080fd5b505afa1580156107b4573d6000803e3d6000fd5b5050601b5460408051855173ffffffffffffffffffffffffffffffffffffffff90811660208084019190915287015182840152918601518216606082015261066394509116915063c64b3bb5906080016040516020818303038152906040526040518263ffffffff1660e01b815260040161082f9190611313565b602060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610870919061132d565b6001610cec565b60606011805480602002602001604051908101604052809291908181526020016000905b828210156104d85783829060005260206000200180546108ba90611368565b80601f01602080910402602001604051908101604052809291908181526020018280546108e690611368565b80156109335780601f1061090857610100808354040283529160200191610933565b820191906000526020600020905b81548152906001019060200180831161091657829003601f168201915b50505050508152602001906001019061089b565b60606013805480602002602001604051908101604052809291908181526020016000905b828210156104d857600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610a3757602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116109e45790505b5050505050815250508152602001906001019061096b565b60606010805480602002602001604051908101604052809291908181526020016000905b828210156104d8578382906000526020600020018054610a9290611368565b80601f0160208091040260200160405190810160405280929190818152602001828054610abe90611368565b8015610b0b5780601f10610ae057610100808354040283529160200191610b0b565b820191906000526020600020905b815481529060010190602001808311610aee57829003601f168201915b505050505081526020019060010190610a73565b60008054610100900460ff1615610b3f5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610c7a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c6564000000000000000000000000000000000000000000000000000082840152825180830384018152606083019093526000929091610be4917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016113bb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610c1c91611403565b6000604051808303816000865af19150503d8060008114610c59576040519150601f19603f3d011682016040523d82523d6000602084013e610c5e565b606091505b5091505080806020019051810190610c76919061132d565b9150505b919050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156102ec5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116102c1575050505050905090565b80151582151514610ee6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610d7c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f60408201527f6c5d000000000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382610de5576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610e1c565b6040518060400160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b604051610e29919061141f565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381610e92576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610ec9565b6040518060400160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b604051610ed69190611466565b60405180910390a1610ee6610eea565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156110385760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000009282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610fb992916020016113bb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ff191611403565b6000604051808303816000865af19150503d806000811461102e576040519150601f19603f3d011682016040523d82523d6000602084013e611033565b606091505b505050505b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b610303806114ae83390190565b61019d806117b183390190565b6020808252825182820181905260009190848201906040850190845b818110156110ce57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161109c565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156111c1578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805173ffffffffffffffffffffffffffffffffffffffff168552880151888501889052805188860181905290890190839060608701905b808310156111ac5783517fffffffff00000000000000000000000000000000000000000000000000000000168252928b019260019290920191908b019061116a565b50978a01979550505091870191600101611102565b50919998505050505050505050565b600080604083850312156111e357600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff8116811461120e57600080fd5b809150509250929050565b60005b8381101561123457818101518382015260200161121c565b83811115611243576000848401525b50505050565b60008151808452611261816020860160208601611219565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611306577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526112f4858351611249565b945092850192908501906001016112ba565b5092979650505050505050565b6020815260006113266020830184611249565b9392505050565b60006020828403121561133f57600080fd5b8151801515811461132657600080fd5b60006020828403121561136157600080fd5b5051919050565b600181811c9082168061137c57607f821691505b6020821081036113b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7fffffffff0000000000000000000000000000000000000000000000000000000083168152600082516113f5816004850160208701611219565b919091016004019392505050565b60008251611415818460208701611219565b9190910192915050565b60408152600a60408201527f2020202020204c6566740000000000000000000000000000000000000000000060608201526080602082015260006113266080830184611249565b60408152600a60408201527f20202020205269676874000000000000000000000000000000000000000000006060820152608060208201526000611326608083018461124956fe608060405234801561001057600080fd5b506102e3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c64b3bb514610030575b600080fd5b61004361003e366004610160565b610057565b604051901515815260200160405180910390f35b6000808280602001905181019061006e9190610258565b6020810151815160408084015190517fb47064c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6024820152939450919291169063b47064c890604401602060405180830381865afa158015610105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012991906102bd565b109392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561017257600080fd5b813567ffffffffffffffff8082111561018a57600080fd5b818401915084601f83011261019e57600080fd5b8135818111156101b0576101b0610131565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101f6576101f6610131565b8160405282815287602084870101111561020f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b805173ffffffffffffffffffffffffffffffffffffffff8116811461025357600080fd5b919050565b60006060828403121561026a57600080fd5b6040516060810181811067ffffffffffffffff8211171561028d5761028d610131565b6040526102998361022f565b8152602083015160208201526102b16040840161022f565b60408201529392505050565b6000602082840312156102cf57600080fd5b505191905056fea164736f6c634300080f000a608060405234801561001057600080fd5b5061017d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063060dac881461003b578063b47064c814610081575b600080fd5b61007f610049366004610101565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832095909416825293909352912055565b005b6100c661008f36600461013d565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152602081815260408083209386168352929052205492915050565b60405190815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100fc57600080fd5b919050565b60008060006060848603121561011657600080fd5b61011f846100d8565b925061012d602085016100d8565b9150604084013590509250925092565b6000806040838503121561015057600080fd5b610159836100d8565b9150610167602084016100d8565b9050925092905056fea164736f6c634300080f000aa164736f6c634300080f000a",
    "sourceMap": "962:1807:131:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1463:110;;;:::i;:::-;;2161:134:272;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2930:133;;;:::i;2631:141::-;;;:::i;2447:178::-;;;:::i;:::-;;;;;;;:::i;2372:395:131:-;;;;;;:::i;:::-;;:::i;1758:398::-;;;;;;:::i;:::-;;:::i;2301:140:272:-;;;:::i;:::-;;;;;;;:::i;2778:146::-;;;:::i;1866:141::-;;;:::i;1819:584:266:-;;;:::i;:::-;;;4403:14:283;;4396:22;4378:41;;4366:2;4351:18;1819:584:266;4238:187:283;2013:142:272;;;:::i;1572:26:266:-;;;;;;;;;1463:110:131;1503:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1499:1:131;:24;;;;;;;;;;;;;;;1542;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1533:6:131;:33;;;;;;;;;;;;;;;1463:110::o;2161:134:272:-;2208:33;2272:16;2253:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2161:134;:::o;2930:133::-;2976:33;3040:16;3021:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2930:133;:::o;2631:141::-;2679:35;2747:18;2726:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2631:141;:::o;2447:178::-;2503:48;2592:26;2563:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2447:178;:::o;2372:395:131:-;2506:142;;;;;;;;2560:6;;;;;;2506:142;;;;;;;;;;;;;;;;;;2659:51;;;;;;;;4693:34:283;;;;1319:42:131;4743:18:283;;;4736:43;4795:18;;;4788:34;;;2506:142:131;;2659:22;;4605:18:283;;2659:51:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2730:1:131;;2738:13;;;5112::283;;2730:1:131;5108:22:283;;;2738:13:131;;;;5090:41:283;;;;5175:17;;5169:24;5147:20;;;5140:54;5242:17;;;5236:24;5232:33;;5210:20;;;5203:63;2721:39:131;;-1:-1:-1;2730:1:131;;;-1:-1:-1;2730:7:131;;5002:18:283;;2738:13:131;;;;;;;;;;;;2730:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2754:5;2721:8;:39::i;:::-;2463:304;2372:395;;:::o;1758:398::-;1883:142;;;;;;;;1937:6;;;;;;1883:142;;;;;;;;;;;;;;;;;;2046:40;;;;;;;;6017:34:283;;;;1319:42:131;6067:18:283;;;6060:43;1883:142:131;;2036:9;;;;1883:142;;1937:6;2046:23;;5929:18:283;;2046:40:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2036:64;;;;;;;;;;2046:53;-1:-1:-1;2036:64:131;;;4378:41:283;4351:18;;2036:64:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2120:1:131;;2128:13;;;5112::283;;2120:1:131;5108:22:283;;;2128:13:131;;;;5090:41:283;;;;5175:17;;5169:24;5147:20;;;5140:54;5242:17;;;5236:24;5232:33;;5210:20;;;5203:63;2111:38:131;;-1:-1:-1;2120:1:131;;;-1:-1:-1;2120:7:131;;5002:18:283;;2128:13:131;;;;;;;;;;;;2120:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2144:4;2111:8;:38::i;2301:140:272:-;2349:34;2416:18;2395:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2778:146;2826:40;2899:18;2878:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:141;1915:34;1982:18;1961:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584:266;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:266;;;;;;;;1819:584::o;1869:528::-;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;6919:74:283;;;2221:17:266;7009:18:283;;;7002:34;2196:43:266;;;;;;;;;6892:18:283;;;2196:43:266;;;-1:-1:-1;;1671:64:266;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;;;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:266:o;2013:142:272:-;2062:35;2130:18;2109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2013:142;:::o;789:312:268:-;859:1;854:6;;:1;:6;;;850:245;;881:41;;;;;7950:2:283;7932:21;;;7989:2;7969:18;;;7962:30;8028:34;8023:2;8008:18;;8001:62;8099:4;8094:2;8079:18;;8072:32;8136:3;8121:19;;7748:398;881:41:268;;;;;;;;941:52;972:1;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:52;;;;;;:::i;:::-;;;;;;;;1012;1043:1;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1012:52;;;;;;:::i;:::-;;;;;;;;1078:6;:4;:6::i;:::-;789:312;;:::o;2410:424:266:-;2990:42;2978:55;3059:16;2445:359;;2645:67;;;1671:64;2645:67;;;9267:74:283;;;2670:17:266;9357:18:283;;;9350:34;;;;2705:4:266;9400:18:283;;;9393:34;2482:11:266;;1671:64;2579:43;;9240:18:283;;2645:67:266;;;;;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;;;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:266;2813:7;:14;;;;;;;;2410:424::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;14:681:283:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:218;465:6;462:1;459:13;451:218;;;530:13;;545:42;526:62;514:75;;644:15;;;;609:12;;;;487:1;480:9;451:218;;;-1:-1:-1;686:3:283;;14:681;-1:-1:-1;;;;;;14:681:283:o;700:1699::-;906:4;935:2;975;964:9;960:18;1005:2;994:9;987:21;1028:6;1063;1057:13;1094:6;1086;1079:22;1120:2;1110:12;;1153:2;1142:9;1138:18;1131:25;;1215:2;1205:6;1202:1;1198:14;1187:9;1183:30;1179:39;1253:2;1245:6;1241:15;1274:1;1295;1305:1065;1321:6;1316:3;1313:15;1305:1065;;;1390:22;;;1414:66;1386:95;1374:108;;1505:13;;1592:9;;1603:42;1588:58;1573:74;;1686:11;;1680:18;1718:15;;;1711:27;;;1799:19;;1545:15;;;1831:24;;;1921:21;;;;1966:1;;1889:2;1877:15;;;1980:282;1996:8;1991:3;1988:17;1980:282;;;2077:15;;2094:66;2073:88;2059:103;;2231:17;;;;2024:1;2015:11;;;;;2188:14;;;;1980:282;;;-1:-1:-1;2348:12:283;;;;2285:5;-1:-1:-1;;;2313:15:283;;;;1347:1;1338:11;1305:1065;;;-1:-1:-1;2387:6:283;;700:1699;-1:-1:-1;;;;;;;;;700:1699:283:o;2404:377::-;2472:6;2480;2533:2;2521:9;2512:7;2508:23;2504:32;2501:52;;;2549:1;2546;2539:12;2501:52;2585:9;2572:23;2562:33;;2645:2;2634:9;2630:18;2617:32;2689:42;2682:5;2678:54;2671:5;2668:65;2658:93;;2747:1;2744;2737:12;2658:93;2770:5;2760:15;;;2404:377;;;;;:::o;2786:258::-;2858:1;2868:113;2882:6;2879:1;2876:13;2868:113;;;2958:11;;;2952:18;2939:11;;;2932:39;2904:2;2897:10;2868:113;;;2999:6;2996:1;2993:13;2990:48;;;3034:1;3025:6;3020:3;3016:16;3009:27;2990:48;;2786:258;;;:::o;3049:317::-;3091:3;3129:5;3123:12;3156:6;3151:3;3144:19;3172:63;3228:6;3221:4;3216:3;3212:14;3205:4;3198:5;3194:16;3172:63;:::i;:::-;3280:2;3268:15;3285:66;3264:88;3255:98;;;;3355:4;3251:109;;3049:317;-1:-1:-1;;3049:317:283:o;3371:862::-;3533:4;3562:2;3602;3591:9;3587:18;3632:2;3621:9;3614:21;3655:6;3690;3684:13;3721:6;3713;3706:22;3759:2;3748:9;3744:18;3737:25;;3821:2;3811:6;3808:1;3804:14;3793:9;3789:30;3785:39;3771:53;;3859:2;3851:6;3847:15;3880:1;3890:314;3904:6;3901:1;3898:13;3890:314;;;3993:66;3981:9;3973:6;3969:22;3965:95;3960:3;3953:108;4084:40;4117:6;4108;4102:13;4084:40;:::i;:::-;4074:50;-1:-1:-1;4182:12:283;;;;4147:15;;;;3926:1;3919:9;3890:314;;;-1:-1:-1;4221:6:283;;3371:862;-1:-1:-1;;;;;;;3371:862:283:o;5277:218::-;5424:2;5413:9;5406:21;5387:4;5444:45;5485:2;5474:9;5470:18;5462:6;5444:45;:::i;:::-;5436:53;5277:218;-1:-1:-1;;;5277:218:283:o;5500:277::-;5567:6;5620:2;5608:9;5599:7;5595:23;5591:32;5588:52;;;5636:1;5633;5626:12;5588:52;5668:9;5662:16;5721:5;5714:13;5707:21;5700:5;5697:32;5687:60;;5743:1;5740;5733:12;6114:184;6184:6;6237:2;6225:9;6216:7;6212:23;6208:32;6205:52;;;6253:1;6250;6243:12;6205:52;-1:-1:-1;6276:16:283;;6114:184;-1:-1:-1;6114:184:283:o;6303:437::-;6382:1;6378:12;;;;6425;;;6446:61;;6500:4;6492:6;6488:17;6478:27;;6446:61;6553:2;6545:6;6542:14;6522:18;6519:38;6516:218;;6590:77;6587:1;6580:88;6691:4;6688:1;6681:15;6719:4;6716:1;6709:15;6516:218;;6303:437;;;:::o;7047:417::-;7244:66;7236:6;7232:79;7227:3;7220:92;7202:3;7341:6;7335:13;7357:61;7411:6;7407:1;7402:3;7398:11;7391:4;7383:6;7379:17;7357:61;:::i;:::-;7438:16;;;;7456:1;7434:24;;7047:417;-1:-1:-1;;;7047:417:283:o;7469:274::-;7598:3;7636:6;7630:13;7652:53;7698:6;7693:3;7686:4;7678:6;7674:17;7652:53;:::i;:::-;7721:16;;;;;7469:274;-1:-1:-1;;7469:274:283:o;8151:452::-;8401:2;8390:9;8383:21;8440:2;8435;8424:9;8420:18;8413:30;8479:12;8474:2;8463:9;8459:18;8452:40;8530:3;8523:4;8512:9;8508:20;8501:33;8364:4;8551:46;8592:3;8581:9;8577:19;8569:6;8551:46;:::i;8608:452::-;8858:2;8847:9;8840:21;8897:2;8892;8881:9;8877:18;8870:30;8936:12;8931:2;8920:9;8916:18;8909:40;8987:3;8980:4;8969:9;8965:20;8958:33;8821:4;9008:46;9049:3;9038:9;9034:19;9026:6;9008:46;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_TEST()": "fa7626d4",
    "excludeArtifacts()": "b5508aa9",
    "excludeContracts()": "e20c9f71",
    "excludeSenders()": "1ed7831c",
    "failed()": "ba414fa6",
    "setUp()": "0a9254e4",
    "targetArtifactSelectors()": "66d9a9a0",
    "targetArtifacts()": "85226c81",
    "targetContracts()": "3f7286f4",
    "targetSelectors()": "916a17c6",
    "targetSenders()": "3e5e3c23",
    "testFuzz_check_highBalance_fails(uint256,address)": "75a7b620",
    "testFuzz_check_succeeds(uint256,address)": "7d447886"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"testFuzz_check_highBalance_fails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"testFuzz_check_succeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"CheckGelatoLowTest\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setUp()\":{\"notice\":\"Deploy the `CheckGelatoLow` and `MockGelatoTreasury` contracts.\"},\"testFuzz_check_highBalance_fails(uint256,address)\":{\"notice\":\"Fuzz the `check` function and assert that it always returns false         when the user's balance in the treasury is greater than or equal         to the threshold.\"},\"testFuzz_check_succeeds(uint256,address)\":{\"notice\":\"Fuzz the `check` function and assert that it always returns true         when the user's balance in the treasury is less than the threshold.\"}},\"notice\":\"Tests the CheckBalanceHigh contract via fuzzing both the success case         and the failure case.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/CheckGelatoLow.t.sol\":\"CheckGelatoLowTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=node_modules/clones-with-immutable-args/src/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":clones-with-immutable-args/=node_modules/clones-with-immutable-args/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/periphery/drippie/IDripCheck.sol\":{\"keccak256\":\"0xb52c89360566b2963dfd82cb2cc23f0c3ce4503a69e8563878e8aa80b6c60b3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d1a67f456f8eb6219f4e85857714bed1c27ce934e5e81497b733646848b315c\",\"dweb:/ipfs/QmRFwsdm5ZCWP9b3S7YAz9TuCdgLzsNrAMpX5WckU3v7WG\"]},\"contracts/periphery/drippie/dripchecks/CheckGelatoLow.sol\":{\"keccak256\":\"0x688570de23a319cb55491f1aeba944e80ac896d2221028a058917564eaad7e6f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4aebb50187c73e520b5526d2d01d189eebcadfb59cafc8a331bd824774e8e09a\",\"dweb:/ipfs/QmPt4DETqpq6GPFvpxRgruXJ2vaSKoEZosLdmQz8MFBJSu\"]},\"contracts/test/CheckGelatoLow.t.sol\":{\"keccak256\":\"0x03d5b274238b00336e3068db0fa18de2ce3e331e3e95aec1f019409882d836bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://156e5c41d60d698884f986d614e18f02eb07688dcaaeba98b52c437b9163c6b9\",\"dweb:/ipfs/QmcYEti6rEDtCHDd1r7xAC3H2wm3Z4Y8r3mTLWu4PAdF4W\"]},\"node_modules/ds-test/src/test.sol\":{\"keccak256\":\"0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5\",\"dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr\"]},\"node_modules/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"node_modules/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b\",\"dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL\"]},\"node_modules/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x9100bd38453711d5f5ae32d16b4aacef8d4e26abb3061fcc9920cd30cdb49315\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://114654e304083d3403510edd13d7df2223747337150ecf51dd36b441e50498f7\",\"dweb:/ipfs/QmQy6uvcVHyHzU2RbuvEo1hKiV7k81z21gR6DSj4DkCP8D\"]},\"node_modules/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb58d624eb0922d4ab14856efb0ab558b0727ccfc28448c5779f1ab4d98cf3daf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1869fc58cb27a7b680428b79d0e0b6f45bd3c61fedb4b3f895e143fb899519d5\",\"dweb:/ipfs/QmcjECGVpQPjhL2bokDyQeGWdzM99qPFMhq5r7KqKLot7R\"]},\"node_modules/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"node_modules/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xd855e1fea6247f1bef118e2bee9f0039832988b7173fd17766bba4014ae26a3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c58c0f0b66852dfd3c76fb7958d8b023489d7a874c7cb1ad4f2021f9ec8ab477\",\"dweb:/ipfs/Qmd3MX9HAkNUhPddL29ekwhqgRnjAobZ35UzchaJZNACCN\"]},\"node_modules/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c\",\"dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV\"]},\"node_modules/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"node_modules/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5\",\"dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9\"]},\"node_modules/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x2882555b0f58e48144e46e9aa5118a506b31ad7485327d54e8f681e8b414c337\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2850bcb1322de9d9dd87ded42debbe0e8fc4048173788d4c00c98b50e5f76985\",\"dweb:/ipfs/QmUiPKnj7GZLLQbJGY7bVDu79Q9jGEYNjR5ZBgwFy8mH97\"]},\"node_modules/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x18ac6dcce9cdfe3bc754ce910b4b97e56963c49a92e50f57d055adb562416b86\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6b29b4a814dc26c3722e994a792f4cc1be86e6b8c2b2adc352ed54fb326593d\",\"dweb:/ipfs/Qma8a7XELNmUepiitaLyxJXW66urnXsvCwx1bMLmRw2Fpn\"]},\"node_modules/forge-std/src/Test.sol\":{\"keccak256\":\"0xddf16afce2bb7bbb69ed868d4c7ee8b4ea4ffbf8929427fe799682f107534945\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52f6ebde2a4cb9d08aea5fb3d62b2f15961bb9a29d6d9e30dd0859d0d631cabf\",\"dweb:/ipfs/QmeJ9Dp1GYUggzjGiwTZkxCfB15NfyfgcyrNZL5tyWZbVZ\"]},\"node_modules/forge-std/src/Vm.sol\":{\"keccak256\":\"0xb5d4816a3f37977b1efa07b5e715daa917e96fd28dec1805c4189653db4ea33a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34338fa7f079f8d64f20d976f9bf908a710c8728f18c4b361b020b24fedfedf2\",\"dweb:/ipfs/QmYhwY1wi6vVLMUsJ32L3GiSR9HRaFhGL1Y3wRDjy41KXn\"]},\"node_modules/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"node_modules/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"node_modules/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "excludedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifactSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedArtifactSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "targetedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testFuzz_check_highBalance_fails"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_threshold",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testFuzz_check_succeeds"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "setUp()": {
            "notice": "Deploy the `CheckGelatoLow` and `MockGelatoTreasury` contracts."
          },
          "testFuzz_check_highBalance_fails(uint256,address)": {
            "notice": "Fuzz the `check` function and assert that it always returns false         when the user's balance in the treasury is greater than or equal         to the threshold."
          },
          "testFuzz_check_succeeds(uint256,address)": {
            "notice": "Fuzz the `check` function and assert that it always returns true         when the user's balance in the treasury is less than the threshold."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=node_modules/clones-with-immutable-args/src/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        "@rari-capital/=node_modules/@rari-capital/",
        "@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        "clones-with-immutable-args/=node_modules/clones-with-immutable-args/",
        "ds-test/=node_modules/ds-test/src/",
        "forge-std/=node_modules/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/test/CheckGelatoLow.t.sol": "CheckGelatoLowTest"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/periphery/drippie/IDripCheck.sol": {
        "keccak256": "0xb52c89360566b2963dfd82cb2cc23f0c3ce4503a69e8563878e8aa80b6c60b3f",
        "urls": [
          "bzz-raw://2d1a67f456f8eb6219f4e85857714bed1c27ce934e5e81497b733646848b315c",
          "dweb:/ipfs/QmRFwsdm5ZCWP9b3S7YAz9TuCdgLzsNrAMpX5WckU3v7WG"
        ],
        "license": "MIT"
      },
      "contracts/periphery/drippie/dripchecks/CheckGelatoLow.sol": {
        "keccak256": "0x688570de23a319cb55491f1aeba944e80ac896d2221028a058917564eaad7e6f",
        "urls": [
          "bzz-raw://4aebb50187c73e520b5526d2d01d189eebcadfb59cafc8a331bd824774e8e09a",
          "dweb:/ipfs/QmPt4DETqpq6GPFvpxRgruXJ2vaSKoEZosLdmQz8MFBJSu"
        ],
        "license": "MIT"
      },
      "contracts/test/CheckGelatoLow.t.sol": {
        "keccak256": "0x03d5b274238b00336e3068db0fa18de2ce3e331e3e95aec1f019409882d836bf",
        "urls": [
          "bzz-raw://156e5c41d60d698884f986d614e18f02eb07688dcaaeba98b52c437b9163c6b9",
          "dweb:/ipfs/QmcYEti6rEDtCHDd1r7xAC3H2wm3Z4Y8r3mTLWu4PAdF4W"
        ],
        "license": "MIT"
      },
      "node_modules/ds-test/src/test.sol": {
        "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
        "urls": [
          "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
          "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/forge-std/src/Base.sol": {
        "keccak256": "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c",
        "urls": [
          "bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224",
          "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdAssertions.sol": {
        "keccak256": "0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60",
        "urls": [
          "bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b",
          "dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdChains.sol": {
        "keccak256": "0x9100bd38453711d5f5ae32d16b4aacef8d4e26abb3061fcc9920cd30cdb49315",
        "urls": [
          "bzz-raw://114654e304083d3403510edd13d7df2223747337150ecf51dd36b441e50498f7",
          "dweb:/ipfs/QmQy6uvcVHyHzU2RbuvEo1hKiV7k81z21gR6DSj4DkCP8D"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdCheats.sol": {
        "keccak256": "0xb58d624eb0922d4ab14856efb0ab558b0727ccfc28448c5779f1ab4d98cf3daf",
        "urls": [
          "bzz-raw://1869fc58cb27a7b680428b79d0e0b6f45bd3c61fedb4b3f895e143fb899519d5",
          "dweb:/ipfs/QmcjECGVpQPjhL2bokDyQeGWdzM99qPFMhq5r7KqKLot7R"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdError.sol": {
        "keccak256": "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77",
        "urls": [
          "bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6",
          "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdInvariant.sol": {
        "keccak256": "0xd855e1fea6247f1bef118e2bee9f0039832988b7173fd17766bba4014ae26a3c",
        "urls": [
          "bzz-raw://c58c0f0b66852dfd3c76fb7958d8b023489d7a874c7cb1ad4f2021f9ec8ab477",
          "dweb:/ipfs/Qmd3MX9HAkNUhPddL29ekwhqgRnjAobZ35UzchaJZNACCN"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdJson.sol": {
        "keccak256": "0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b",
        "urls": [
          "bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c",
          "dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdMath.sol": {
        "keccak256": "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2",
        "urls": [
          "bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92",
          "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdStorage.sol": {
        "keccak256": "0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673",
        "urls": [
          "bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5",
          "dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdStyle.sol": {
        "keccak256": "0x2882555b0f58e48144e46e9aa5118a506b31ad7485327d54e8f681e8b414c337",
        "urls": [
          "bzz-raw://2850bcb1322de9d9dd87ded42debbe0e8fc4048173788d4c00c98b50e5f76985",
          "dweb:/ipfs/QmUiPKnj7GZLLQbJGY7bVDu79Q9jGEYNjR5ZBgwFy8mH97"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdUtils.sol": {
        "keccak256": "0x18ac6dcce9cdfe3bc754ce910b4b97e56963c49a92e50f57d055adb562416b86",
        "urls": [
          "bzz-raw://d6b29b4a814dc26c3722e994a792f4cc1be86e6b8c2b2adc352ed54fb326593d",
          "dweb:/ipfs/Qma8a7XELNmUepiitaLyxJXW66urnXsvCwx1bMLmRw2Fpn"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/Test.sol": {
        "keccak256": "0xddf16afce2bb7bbb69ed868d4c7ee8b4ea4ffbf8929427fe799682f107534945",
        "urls": [
          "bzz-raw://52f6ebde2a4cb9d08aea5fb3d62b2f15961bb9a29d6d9e30dd0859d0d631cabf",
          "dweb:/ipfs/QmeJ9Dp1GYUggzjGiwTZkxCfB15NfyfgcyrNZL5tyWZbVZ"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/Vm.sol": {
        "keccak256": "0xb5d4816a3f37977b1efa07b5e715daa917e96fd28dec1805c4189653db4ea33a",
        "urls": [
          "bzz-raw://34338fa7f079f8d64f20d976f9bf908a710c8728f18c4b361b020b24fedfedf2",
          "dweb:/ipfs/QmYhwY1wi6vVLMUsJ32L3GiSR9HRaFhGL1Y3wRDjy41KXn"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/console2.sol": {
        "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
        "urls": [
          "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
          "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/interfaces/IMulticall3.sol": {
        "keccak256": "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a",
        "urls": [
          "bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0",
          "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114733,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "IS_TEST",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 114735,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_failed",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 124395,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "stdChainsInitialized",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 124416,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "chains",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Chain)124411_storage)"
      },
      {
        "astId": 124420,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "defaultRpcUrls",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 124424,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "idToAlias",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 124427,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "fallbackToDefaultRpcUrls",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 125093,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "gasMeteringOff",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 126806,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "stdstore",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(StdStorage)128292_storage"
      },
      {
        "astId": 116443,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_excludedContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116446,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_excludedSenders",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116449,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_targetedContracts",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116452,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_targetedSenders",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116455,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_excludedArtifacts",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 116458,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_targetedArtifacts",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 116462,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_targetedArtifactSelectors",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(FuzzSelector)116440_storage)dyn_storage"
      },
      {
        "astId": 116466,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "_targetedSelectors",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_struct(FuzzSelector)116440_storage)dyn_storage"
      },
      {
        "astId": 122939,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "stdstore",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(StdStorage)128292_storage"
      },
      {
        "astId": 50952,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "c",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(CheckGelatoLow)46177"
      },
      {
        "astId": 50956,
        "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
        "label": "gelato",
        "offset": 0,
        "slot": "28",
        "type": "t_contract(MockGelatoTreasury)50945"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32",
        "base": "t_bytes4"
      },
      "t_array(t_string_storage)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32",
        "base": "t_string_storage"
      },
      "t_array(t_struct(FuzzSelector)116440_storage)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "struct StdInvariant.FuzzSelector[]",
        "numberOfBytes": "32",
        "base": "t_struct(FuzzSelector)116440_storage"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(CheckGelatoLow)46177": {
        "encoding": "inplace",
        "label": "contract CheckGelatoLow",
        "numberOfBytes": "20"
      },
      "t_contract(MockGelatoTreasury)50945": {
        "encoding": "inplace",
        "label": "contract MockGelatoTreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Chain)124411_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct StdChains.Chain)",
        "numberOfBytes": "32",
        "value": "t_struct(Chain)124411_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Chain)124411_storage": {
        "encoding": "inplace",
        "label": "struct StdChains.Chain",
        "numberOfBytes": "128",
        "members": [
          {
            "astId": 124404,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 124406,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 124408,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "chainAlias",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 124410,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "rpcUrl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ]
      },
      "t_struct(FuzzSelector)116440_storage": {
        "encoding": "inplace",
        "label": "struct StdInvariant.FuzzSelector",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 116436,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 116439,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "selectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ]
      },
      "t_struct(StdStorage)128292_storage": {
        "encoding": "inplace",
        "label": "struct StdStorage",
        "numberOfBytes": "224",
        "members": [
          {
            "astId": 128272,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "slots",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))"
          },
          {
            "astId": 128280,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "finds",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))"
          },
          {
            "astId": 128283,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "_keys",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 128285,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "_sig",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes4"
          },
          {
            "astId": 128287,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "_depth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 128289,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "_target",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 128291,
            "contract": "contracts/test/CheckGelatoLow.t.sol:CheckGelatoLowTest",
            "label": "_set",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "setUp()": {
        "notice": "Deploy the `CheckGelatoLow` and `MockGelatoTreasury` contracts."
      },
      "testFuzz_check_highBalance_fails(uint256,address)": {
        "notice": "Fuzz the `check` function and assert that it always returns false         when the user's balance in the treasury is greater than or equal         to the threshold."
      },
      "testFuzz_check_succeeds(uint256,address)": {
        "notice": "Fuzz the `check` function and assert that it always returns true         when the user's balance in the treasury is less than the threshold."
      }
    },
    "notice": "Tests the CheckBalanceHigh contract via fuzzing both the success case         and the failure case."
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "title": "CheckGelatoLowTest"
  },
  "ast": {
    "absolutePath": "contracts/test/CheckGelatoLow.t.sol",
    "id": 51071,
    "exportedSymbols": {
      "CheckGelatoLow": [
        46177
      ],
      "CheckGelatoLowTest": [
        51070
      ],
      "IGelatoTreasury": [
        46128
      ],
      "MockGelatoTreasury": [
        50945
      ],
      "Test": [
        117552
      ]
    },
    "nodeType": "SourceUnit",
    "src": "31:2739:131",
    "nodes": [
      {
        "id": 50896,
        "nodeType": "PragmaDirective",
        "src": "31:23:131",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 50898,
        "nodeType": "ImportDirective",
        "src": "56:42:131",
        "nodes": [],
        "absolutePath": "node_modules/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 51071,
        "sourceUnit": 117553,
        "symbolAliases": [
          {
            "foreign": {
              "id": 50897,
              "name": "Test",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 117552,
              "src": "65:4:131",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 50901,
        "nodeType": "ImportDirective",
        "src": "99:109:131",
        "nodes": [],
        "absolutePath": "contracts/periphery/drippie/dripchecks/CheckGelatoLow.sol",
        "file": "../periphery/drippie/dripchecks/CheckGelatoLow.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 51071,
        "sourceUnit": 46178,
        "symbolAliases": [
          {
            "foreign": {
              "id": 50899,
              "name": "CheckGelatoLow",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46177,
              "src": "112:14:131",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 50900,
              "name": "IGelatoTreasury",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46128,
              "src": "132:15:131",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 50945,
        "nodeType": "ContractDefinition",
        "src": "361:447:131",
        "nodes": [
          {
            "id": 50910,
            "nodeType": "VariableDeclaration",
            "src": "414:69:131",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "tokenBalances",
            "nameLocation": "470:13:131",
            "scope": 50945,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 50909,
              "keyType": {
                "id": 50905,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "422:7:131",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "414:47:131",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 50908,
                "keyType": {
                  "id": 50906,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "441:7:131",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "433:27:131",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 50907,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "452:7:131",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "id": 50928,
            "nodeType": "FunctionDefinition",
            "src": "490:169:131",
            "nodes": [],
            "body": {
              "id": 50927,
              "nodeType": "Block",
              "src": "603:56:131",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 50925,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 50919,
                          "name": "tokenBalances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 50910,
                          "src": "613:13:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 50922,
                        "indexExpression": {
                          "id": 50920,
                          "name": "_token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 50914,
                          "src": "627:6:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "613:21:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 50923,
                      "indexExpression": {
                        "id": 50921,
                        "name": "_user",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50912,
                        "src": "635:5:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "613:28:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 50924,
                      "name": "_balance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50916,
                      "src": "644:8:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "613:39:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 50926,
                  "nodeType": "ExpressionStatement",
                  "src": "613:39:131"
                }
              ]
            },
            "functionSelector": "060dac88",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setTokenBalance",
            "nameLocation": "499:15:131",
            "parameters": {
              "id": 50917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50912,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "532:5:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 50928,
                  "src": "524:13:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 50911,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "524:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50914,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "555:6:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 50928,
                  "src": "547:14:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 50913,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "547:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50916,
                  "mutability": "mutable",
                  "name": "_balance",
                  "nameLocation": "579:8:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 50928,
                  "src": "571:16:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50915,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "571:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "514:79:131"
            },
            "returnParameters": {
              "id": 50918,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "603:0:131"
            },
            "scope": 50945,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 50944,
            "nodeType": "FunctionDefinition",
            "src": "665:141:131",
            "nodes": [],
            "body": {
              "id": 50943,
              "nodeType": "Block",
              "src": "754:52:131",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 50937,
                        "name": "tokenBalances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50910,
                        "src": "771:13:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 50939,
                      "indexExpression": {
                        "id": 50938,
                        "name": "_token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50932,
                        "src": "785:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "771:21:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 50941,
                    "indexExpression": {
                      "id": 50940,
                      "name": "_user",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50930,
                      "src": "793:5:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "771:28:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 50936,
                  "id": 50942,
                  "nodeType": "Return",
                  "src": "764:35:131"
                }
              ]
            },
            "baseFunctions": [
              46127
            ],
            "functionSelector": "b47064c8",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "userTokenBalance",
            "nameLocation": "674:16:131",
            "parameters": {
              "id": 50933,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50930,
                  "mutability": "mutable",
                  "name": "_user",
                  "nameLocation": "699:5:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 50944,
                  "src": "691:13:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 50929,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "691:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50932,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "714:6:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 50944,
                  "src": "706:14:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 50931,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "706:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "690:31:131"
            },
            "returnParameters": {
              "id": 50936,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50935,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 50944,
                  "src": "745:7:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50934,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "744:9:131"
            },
            "scope": 50945,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 50903,
              "name": "IGelatoTreasury",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46128,
              "src": "392:15:131"
            },
            "id": 50904,
            "nodeType": "InheritanceSpecifier",
            "src": "392:15:131"
          }
        ],
        "canonicalName": "MockGelatoTreasury",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 50902,
          "nodeType": "StructuredDocumentation",
          "src": "210:150:131",
          "text": " @title  MockGelatoTreasury\n @notice Mocks the Gelato treasury for testing purposes. Allows arbitrary\n         setting of user balances."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          50945,
          46128
        ],
        "name": "MockGelatoTreasury",
        "nameLocation": "370:18:131",
        "scope": 51071,
        "usedErrors": []
      },
      {
        "id": 51070,
        "nodeType": "ContractDefinition",
        "src": "962:1807:131",
        "nodes": [
          {
            "id": 50952,
            "nodeType": "VariableDeclaration",
            "src": "1079:16:131",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 50949,
              "nodeType": "StructuredDocumentation",
              "src": "1004:70:131",
              "text": " @notice An instance of the CheckGelatoLow contract."
            },
            "mutability": "mutable",
            "name": "c",
            "nameLocation": "1094:1:131",
            "scope": 51070,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
              "typeString": "contract CheckGelatoLow"
            },
            "typeName": {
              "id": 50951,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 50950,
                "name": "CheckGelatoLow",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 46177,
                "src": "1079:14:131"
              },
              "referencedDeclaration": 46177,
              "src": "1079:14:131",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                "typeString": "contract CheckGelatoLow"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 50956,
            "nodeType": "VariableDeclaration",
            "src": "1181:25:131",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 50953,
              "nodeType": "StructuredDocumentation",
              "src": "1102:74:131",
              "text": " @notice An instance of the MockGelatoTreasury contract."
            },
            "mutability": "mutable",
            "name": "gelato",
            "nameLocation": "1200:6:131",
            "scope": 51070,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
              "typeString": "contract MockGelatoTreasury"
            },
            "typeName": {
              "id": 50955,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 50954,
                "name": "MockGelatoTreasury",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 50945,
                "src": "1181:18:131"
              },
              "referencedDeclaration": 50945,
              "src": "1181:18:131",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                "typeString": "contract MockGelatoTreasury"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 50960,
            "nodeType": "VariableDeclaration",
            "src": "1287:74:131",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 50957,
              "nodeType": "StructuredDocumentation",
              "src": "1213:69:131",
              "text": " @notice The account Gelato uses to represent ether"
            },
            "mutability": "constant",
            "name": "eth",
            "nameLocation": "1313:3:131",
            "scope": 51070,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 50958,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1287:7:131",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307845656565654565656545654565654565456545656545454565656565456565656565656545456545",
              "id": 50959,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1319:42:131",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
            },
            "visibility": "internal"
          },
          {
            "id": 50979,
            "nodeType": "FunctionDefinition",
            "src": "1463:110:131",
            "nodes": [],
            "body": {
              "id": 50978,
              "nodeType": "Block",
              "src": "1489:84:131",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 50969,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 50964,
                      "name": "c",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50952,
                      "src": "1499:1:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                        "typeString": "contract CheckGelatoLow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 50967,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1503:18:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_CheckGelatoLow_$46177_$",
                          "typeString": "function () returns (contract CheckGelatoLow)"
                        },
                        "typeName": {
                          "id": 50966,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 50965,
                            "name": "CheckGelatoLow",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 46177,
                            "src": "1507:14:131"
                          },
                          "referencedDeclaration": 46177,
                          "src": "1507:14:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                            "typeString": "contract CheckGelatoLow"
                          }
                        }
                      },
                      "id": 50968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1503:20:131",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                        "typeString": "contract CheckGelatoLow"
                      }
                    },
                    "src": "1499:24:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                      "typeString": "contract CheckGelatoLow"
                    }
                  },
                  "id": 50970,
                  "nodeType": "ExpressionStatement",
                  "src": "1499:24:131"
                },
                {
                  "expression": {
                    "id": 50976,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 50971,
                      "name": "gelato",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50956,
                      "src": "1533:6:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                        "typeString": "contract MockGelatoTreasury"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 50974,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1542:22:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_MockGelatoTreasury_$50945_$",
                          "typeString": "function () returns (contract MockGelatoTreasury)"
                        },
                        "typeName": {
                          "id": 50973,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 50972,
                            "name": "MockGelatoTreasury",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 50945,
                            "src": "1546:18:131"
                          },
                          "referencedDeclaration": 50945,
                          "src": "1546:18:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                            "typeString": "contract MockGelatoTreasury"
                          }
                        }
                      },
                      "id": 50975,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1542:24:131",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                        "typeString": "contract MockGelatoTreasury"
                      }
                    },
                    "src": "1533:33:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                      "typeString": "contract MockGelatoTreasury"
                    }
                  },
                  "id": 50977,
                  "nodeType": "ExpressionStatement",
                  "src": "1533:33:131"
                }
              ]
            },
            "documentation": {
              "id": 50961,
              "nodeType": "StructuredDocumentation",
              "src": "1368:90:131",
              "text": " @notice Deploy the `CheckGelatoLow` and `MockGelatoTreasury` contracts."
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "1472:5:131",
            "parameters": {
              "id": 50962,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1477:2:131"
            },
            "returnParameters": {
              "id": 50963,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1489:0:131"
            },
            "scope": 51070,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 51026,
            "nodeType": "FunctionDefinition",
            "src": "1758:398:131",
            "nodes": [],
            "body": {
              "id": 51025,
              "nodeType": "Block",
              "src": "1840:316:131",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    50991
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 50991,
                      "mutability": "mutable",
                      "name": "p",
                      "nameLocation": "1879:1:131",
                      "nodeType": "VariableDeclaration",
                      "scope": 51025,
                      "src": "1850:30:131",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                        "typeString": "struct CheckGelatoLow.Params"
                      },
                      "typeName": {
                        "id": 50990,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 50989,
                          "name": "CheckGelatoLow.Params",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 46138,
                          "src": "1850:21:131"
                        },
                        "referencedDeclaration": 46138,
                        "src": "1850:21:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Params_$46138_storage_ptr",
                          "typeString": "struct CheckGelatoLow.Params"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 51001,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 50996,
                            "name": "gelato",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 50956,
                            "src": "1937:6:131",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                              "typeString": "contract MockGelatoTreasury"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                              "typeString": "contract MockGelatoTreasury"
                            }
                          ],
                          "id": 50995,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1929:7:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 50994,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1929:7:131",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 50997,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1929:15:131",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 50998,
                        "name": "_threshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50982,
                        "src": "1969:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 50999,
                        "name": "_recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50984,
                        "src": "2004:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 50992,
                        "name": "CheckGelatoLow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46177,
                        "src": "1883:14:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CheckGelatoLow_$46177_$",
                          "typeString": "type(contract CheckGelatoLow)"
                        }
                      },
                      "id": 50993,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "Params",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 46138,
                      "src": "1883:21:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_struct$_Params_$46138_storage_ptr_$",
                        "typeString": "type(struct CheckGelatoLow.Params storage pointer)"
                      }
                    },
                    "id": 51000,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "structConstructorCall",
                    "lValueRequested": false,
                    "names": [
                      "treasury",
                      "threshold",
                      "recipient"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "1883:142:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                      "typeString": "struct CheckGelatoLow.Params memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1850:175:131"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 51011,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 51007,
                              "name": "_recipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 50984,
                              "src": "2070:10:131",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 51008,
                              "name": "eth",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 50960,
                              "src": "2082:3:131",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 51005,
                              "name": "gelato",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 50956,
                              "src": "2046:6:131",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                                "typeString": "contract MockGelatoTreasury"
                              }
                            },
                            "id": 51006,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "userTokenBalance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 50944,
                            "src": "2046:23:131",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view external returns (uint256)"
                            }
                          },
                          "id": 51009,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2046:40:131",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 51010,
                          "name": "_threshold",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 50982,
                          "src": "2089:10:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2046:53:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 51002,
                        "name": "vm",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 122936,
                        "src": "2036:2:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Vm_$119058",
                          "typeString": "contract Vm"
                        }
                      },
                      "id": 51004,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "assume",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 118582,
                      "src": "2036:9:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure external"
                      }
                    },
                    "id": 51012,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2036:64:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 51013,
                  "nodeType": "ExpressionStatement",
                  "src": "2036:64:131"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 51019,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 50991,
                                "src": "2139:1:131",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                                  "typeString": "struct CheckGelatoLow.Params memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                                  "typeString": "struct CheckGelatoLow.Params memory"
                                }
                              ],
                              "expression": {
                                "id": 51017,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "2128:3:131",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 51018,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "2128:10:131",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 51020,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2128:13:131",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 51015,
                            "name": "c",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 50952,
                            "src": "2120:1:131",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                              "typeString": "contract CheckGelatoLow"
                            }
                          },
                          "id": 51016,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "check",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 46176,
                          "src": "2120:7:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (bytes memory) view external returns (bool)"
                          }
                        },
                        "id": 51021,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2120:22:131",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 51022,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2144:4:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 51014,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        123071,
                        123096,
                        123109,
                        123125,
                        123167,
                        123209,
                        123251,
                        123288,
                        123325,
                        123362,
                        114965,
                        114990,
                        115020,
                        115045,
                        115104,
                        115129,
                        115159,
                        115184,
                        116284,
                        116319
                      ],
                      "referencedDeclaration": 123071,
                      "src": "2111:8:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$_t_bool_$returns$__$",
                        "typeString": "function (bool,bool)"
                      }
                    },
                    "id": 51023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2111:38:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 51024,
                  "nodeType": "ExpressionStatement",
                  "src": "2111:38:131"
                }
              ]
            },
            "documentation": {
              "id": 50980,
              "nodeType": "StructuredDocumentation",
              "src": "1579:174:131",
              "text": " @notice Fuzz the `check` function and assert that it always returns true\n         when the user's balance in the treasury is less than the threshold."
            },
            "functionSelector": "7d447886",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testFuzz_check_succeeds",
            "nameLocation": "1767:23:131",
            "parameters": {
              "id": 50985,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50982,
                  "mutability": "mutable",
                  "name": "_threshold",
                  "nameLocation": "1799:10:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 51026,
                  "src": "1791:18:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 50981,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1791:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50984,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "1819:10:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 51026,
                  "src": "1811:18:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 50983,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1811:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1790:40:131"
            },
            "returnParameters": {
              "id": 50986,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1840:0:131"
            },
            "scope": 51070,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 51069,
            "nodeType": "FunctionDefinition",
            "src": "2372:395:131",
            "nodes": [],
            "body": {
              "id": 51068,
              "nodeType": "Block",
              "src": "2463:304:131",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    51038
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 51038,
                      "mutability": "mutable",
                      "name": "p",
                      "nameLocation": "2502:1:131",
                      "nodeType": "VariableDeclaration",
                      "scope": 51068,
                      "src": "2473:30:131",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                        "typeString": "struct CheckGelatoLow.Params"
                      },
                      "typeName": {
                        "id": 51037,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 51036,
                          "name": "CheckGelatoLow.Params",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 46138,
                          "src": "2473:21:131"
                        },
                        "referencedDeclaration": 46138,
                        "src": "2473:21:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Params_$46138_storage_ptr",
                          "typeString": "struct CheckGelatoLow.Params"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 51048,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 51043,
                            "name": "gelato",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 50956,
                            "src": "2560:6:131",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                              "typeString": "contract MockGelatoTreasury"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                              "typeString": "contract MockGelatoTreasury"
                            }
                          ],
                          "id": 51042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2552:7:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 51041,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2552:7:131",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 51044,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2552:15:131",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 51045,
                        "name": "_threshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 51029,
                        "src": "2592:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 51046,
                        "name": "_recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 51031,
                        "src": "2627:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 51039,
                        "name": "CheckGelatoLow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46177,
                        "src": "2506:14:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CheckGelatoLow_$46177_$",
                          "typeString": "type(contract CheckGelatoLow)"
                        }
                      },
                      "id": 51040,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "Params",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 46138,
                      "src": "2506:21:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_struct$_Params_$46138_storage_ptr_$",
                        "typeString": "type(struct CheckGelatoLow.Params storage pointer)"
                      }
                    },
                    "id": 51047,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "structConstructorCall",
                    "lValueRequested": false,
                    "names": [
                      "treasury",
                      "threshold",
                      "recipient"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "2506:142:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                      "typeString": "struct CheckGelatoLow.Params memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2473:175:131"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 51052,
                        "name": "_recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 51031,
                        "src": "2682:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 51053,
                        "name": "eth",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50960,
                        "src": "2694:3:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 51054,
                        "name": "_threshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 51029,
                        "src": "2699:10:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 51049,
                        "name": "gelato",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50956,
                        "src": "2659:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_MockGelatoTreasury_$50945",
                          "typeString": "contract MockGelatoTreasury"
                        }
                      },
                      "id": 51051,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setTokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 50928,
                      "src": "2659:22:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 51055,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2659:51:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 51056,
                  "nodeType": "ExpressionStatement",
                  "src": "2659:51:131"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 51062,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 51038,
                                "src": "2749:1:131",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                                  "typeString": "struct CheckGelatoLow.Params memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_struct$_Params_$46138_memory_ptr",
                                  "typeString": "struct CheckGelatoLow.Params memory"
                                }
                              ],
                              "expression": {
                                "id": 51060,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "2738:3:131",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 51061,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "2738:10:131",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 51063,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2738:13:131",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 51058,
                            "name": "c",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 50952,
                            "src": "2730:1:131",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CheckGelatoLow_$46177",
                              "typeString": "contract CheckGelatoLow"
                            }
                          },
                          "id": 51059,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "check",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 46176,
                          "src": "2730:7:131",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (bytes memory) view external returns (bool)"
                          }
                        },
                        "id": 51064,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2730:22:131",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 51065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2754:5:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 51057,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        123071,
                        123096,
                        123109,
                        123125,
                        123167,
                        123209,
                        123251,
                        123288,
                        123325,
                        123362,
                        114965,
                        114990,
                        115020,
                        115045,
                        115104,
                        115129,
                        115159,
                        115184,
                        116284,
                        116319
                      ],
                      "referencedDeclaration": 123071,
                      "src": "2721:8:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$_t_bool_$returns$__$",
                        "typeString": "function (bool,bool)"
                      }
                    },
                    "id": 51066,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2721:39:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 51067,
                  "nodeType": "ExpressionStatement",
                  "src": "2721:39:131"
                }
              ]
            },
            "documentation": {
              "id": 51027,
              "nodeType": "StructuredDocumentation",
              "src": "2162:205:131",
              "text": " @notice Fuzz the `check` function and assert that it always returns false\n         when the user's balance in the treasury is greater than or equal\n         to the threshold."
            },
            "functionSelector": "75a7b620",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testFuzz_check_highBalance_fails",
            "nameLocation": "2381:32:131",
            "parameters": {
              "id": 51032,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 51029,
                  "mutability": "mutable",
                  "name": "_threshold",
                  "nameLocation": "2422:10:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 51069,
                  "src": "2414:18:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 51028,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2414:7:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 51031,
                  "mutability": "mutable",
                  "name": "_recipient",
                  "nameLocation": "2442:10:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 51069,
                  "src": "2434:18:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 51030,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2434:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2413:40:131"
            },
            "returnParameters": {
              "id": 51033,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2463:0:131"
            },
            "scope": 51070,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 50947,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 117552,
              "src": "993:4:131"
            },
            "id": 50948,
            "nodeType": "InheritanceSpecifier",
            "src": "993:4:131"
          }
        ],
        "canonicalName": "CheckGelatoLowTest",
        "contractDependencies": [
          46177,
          50945
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 50946,
          "nodeType": "StructuredDocumentation",
          "src": "810:151:131",
          "text": " @title  CheckGelatoLowTest\n @notice Tests the CheckBalanceHigh contract via fuzzing both the success case\n         and the failure case."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          51070,
          117552,
          122943,
          122940,
          117503,
          116655,
          127476,
          126797,
          125064,
          124370,
          116431
        ],
        "name": "CheckGelatoLowTest",
        "nameLocation": "971:18:131",
        "scope": 51071,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 131
}