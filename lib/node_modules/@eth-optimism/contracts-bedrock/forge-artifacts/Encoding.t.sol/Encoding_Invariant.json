{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "log_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "log_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "log_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "name": "log_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "val",
          "type": "address"
        }
      ],
      "name": "log_named_address",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "val",
          "type": "uint256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "val",
          "type": "int256[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "val",
          "type": "address[]"
        }
      ],
      "name": "log_named_array",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "val",
          "type": "bytes"
        }
      ],
      "name": "log_named_bytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "name": "log_named_bytes32",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "log_named_decimal_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "val",
          "type": "int256"
        }
      ],
      "name": "log_named_int",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "val",
          "type": "string"
        }
      ],
      "name": "log_named_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log_named_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "log_string",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "log_uint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "logs",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IS_TEST",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "excludedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "excludeSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "excludedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invariant_round_trip_encoding_AToB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invariant_round_trip_encoding_BToA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifactSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedArtifactSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetArtifacts",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "targetedArtifacts_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedContracts_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSelectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct StdInvariant.FuzzSelector[]",
          "name": "targetedSelectors_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targetedSenders_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "2080:1367:193:-:0;;;1572:26:266;;;1594:4;-1:-1:-1;;1572:26:266;;;;;;;;3161:44:269;;;;;;;;;;;2080:1367:193;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806366d9a9a01161008c578063b5508aa911610066578063b5508aa91461015e578063ba414fa614610166578063e20c9f711461017e578063fa7626d41461018657600080fd5b806366d9a9a01461012c57806385226c8114610141578063916a17c61461015657600080fd5b80633f7286f4116100bd5780633f7286f41461011457806341c8965e1461011c5780634d2cf6531461012457600080fd5b80630a9254e4146100e45780631ed7831c146100ee5780633e5e3c231461010c575b600080fd5b6100ec610193565b005b6100f6610349565b6040516101039190611023565b60405180910390f35b6100f66103b8565b6100f6610425565b6100ec610492565b6100ec610530565b6101346105a1565b604051610103919061107d565b6101496106b2565b60405161010391906111e9565b610134610782565b61014961088a565b61016e61095a565b6040519015158152602001610103565b6100f6610aba565b60005461016e9060ff1681565b60405161019f90610f55565b604051809103906000f0801580156101bb573d6000803e3d6000fd5b50601b80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93909316928317909155600e805460018101825560009182527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180549092169092179055604080516002808252606082018352909160208301908036833701905050905063fac49bd560e01b8160008151811061027957610279611269565b7fffffffff000000000000000000000000000000000000000000000000000000009092166020928302919091019091015280517f871c9fbc0000000000000000000000000000000000000000000000000000000090829060019081106102e1576102e1611269565b7fffffffff0000000000000000000000000000000000000000000000000000000090921660209283029190910182015260408051808201909152601b5473ffffffffffffffffffffffffffffffffffffffff16815290810182905261034581610b27565b5050565b6060600d8054806020026020016040519081016040528092919081815260200182805480156103ae57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610383575b5050505050905090565b6060600f8054806020026020016040519081016040528092919081815260200182805480156103ae5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610383575050505050905090565b6060600e8054806020026020016040519081016040528092919081815260200182805480156103ae5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610383575050505050905090565b601b54604080517f54c03f25000000000000000000000000000000000000000000000000000000008152905161052e9273ffffffffffffffffffffffffffffffffffffffff16916354c03f259160048083019260209291908290030181865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190611298565b6000610be4565b565b601b54604080517f5e355239000000000000000000000000000000000000000000000000000000008152905161052e9273ffffffffffffffffffffffffffffffffffffffff1691635e3552399160048083019260209291908290030181865afa158015610503573d6000803e3d6000fd5b60606012805480602002602001604051908101604052809291908181526020016000905b828210156106a957600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561069157602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161063e5790505b505050505081525050815260200190600101906105c5565b50505050905090565b60606011805480602002602001604051908101604052809291908181526020016000905b828210156106a95783829060005260206000200180546106f5906112c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610721906112c1565b801561076e5780601f106107435761010080835404028352916020019161076e565b820191906000526020600020905b81548152906001019060200180831161075157829003601f168201915b5050505050815260200190600101906106d6565b60606013805480602002602001604051908101604052809291908181526020016000905b828210156106a957600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561087257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161081f5790505b505050505081525050815260200190600101906107a6565b60606010805480602002602001604051908101604052809291908181526020016000905b828210156106a95783829060005260206000200180546108cd906112c1565b80601f01602080910402602001604051908101604052809291908181526020018280546108f9906112c1565b80156109465780601f1061091b57610100808354040283529160200191610946565b820191906000526020600020905b81548152906001019060200180831161092957829003601f168201915b5050505050815260200190600101906108ae565b60008054610100900460ff161561097a5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ab55760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c6564000000000000000000000000000000000000000000000000000082840152825180830384018152606083019093526000929091610a1f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001611314565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610a579161135c565b6000604051808303816000865af19150503d8060008114610a94576040519150601f19603f3d011682016040523d82523d6000602084013e610a99565b606091505b5091505080806020019051810190610ab19190611298565b9150505b919050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156103ae5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610383575050505050905090565b6013805460018101825560009190915281517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090600290920291820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117815560208084015180518594610bde937f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a091909101920190610f62565b50505050565b80151582151514610345577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610c749060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f60408201527f6c5d000000000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382610cdd576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610d14565b6040518060400160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b604051610d219190611378565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381610d8a576040518060400160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250610dc1565b6040518060400160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b604051610dce91906113bf565b60405180910390a1610345737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610f275760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190527f6661696c656400000000000000000000000000000000000000000000000000009282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ea89291602001611314565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610ee09161135c565b6000604051808303816000865af19150503d8060008114610f1d576040519150601f19603f3d011682016040523d82523d6000602084013e610f22565b606091505b505050505b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b6102638061140783390190565b82805482825590600052602060002090600701600890048101928215610ffe5791602002820160005b83821115610fcc57835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610f8b565b8015610ffc5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610fcc565b505b5061100a92915061100e565b5090565b5b8082111561100a576000815560010161100f565b6020808252825182820181905260009190848201906040850190845b8181101561107157835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161103f565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611164578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805173ffffffffffffffffffffffffffffffffffffffff168552880151888501889052805188860181905290890190839060608701905b8083101561114f5783517fffffffff00000000000000000000000000000000000000000000000000000000168252928b019260019290920191908b019061110d565b50978a019795505050918701916001016110a5565b50919998505050505050505050565b60005b8381101561118e578181015183820152602001611176565b83811115610bde5750506000910152565b600081518084526111b7816020860160208601611173565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561125c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261124a85835161119f565b94509285019290850190600101611210565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156112aa57600080fd5b815180151581146112ba57600080fd5b9392505050565b600181811c908216806112d557607f821691505b60208210810361130e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681526000825161134e816004850160208701611173565b919091016004019392505050565b6000825161136e818460208701611173565b9190910192915050565b60408152600a60408201527f2020202020204c6566740000000000000000000000000000000000000000000060608201526080602082015260006112ba608083018461119f565b60408152600a60408201527f202020202052696768740000000000000000000000000000000000000000000060608201526080602082015260006112ba608083018461119f56fe608060405234801561001057600080fd5b50610243806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806354c03f25146100515780635e35523914610072578063871c9fbc14610084578063fac49bd514610099575b600080fd5b60005461005e9060ff1681565b604051901515815260200160405180910390f35b60005461005e90610100900460ff1681565b6100976100923660046101ba565b6100ac565b005b6100976100a73660046101d3565b610131565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660f082901c7fffff0000000000000000000000000000000000000000000000000000000000008316821780841461012b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b50505050565b600061013f838360f01b1790565b90507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082169060f083901c9085168214158061018257508361ffff168161ffff1614155b156101b357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050505050565b6000602082840312156101cc57600080fd5b5035919050565b600080604083850312156101e657600080fd5b82357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461021457600080fd5b9150602083013561ffff8116811461022b57600080fd5b80915050925092905056fea164736f6c634300080f000aa164736f6c634300080f000a",
    "sourceMap": "2080:1367:193:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2176:460;;;:::i;:::-;;2161:134:272;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2930:133;;;:::i;2631:141::-;;;:::i;2822:193:193:-;;;:::i;3227:218::-;;;:::i;2447:178:272:-;;;:::i;:::-;;;;;;;:::i;2301:140::-;;;:::i;:::-;;;;;;;:::i;2778:146::-;;;:::i;1866:141::-;;;:::i;1819:584:266:-;;;:::i;:::-;;;4021:14:283;;4014:22;3996:41;;3984:2;3969:18;1819:584:266;3856:187:283;2013:142:272;;;:::i;1572:26:266:-;;;;;;;;;2176:460:193;2255:24;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2247:5:193;:32;;;;;;;;;;;;;;;;;1419:18:272;:45;;-1:-1:-1;1419:45:272;;;;-1:-1:-1;1419:45:272;;;;;;;;;;;;;;;2359:15:193;;;2372:1;2359:15;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2359:15:193;2331:43;;2399:35;;;2384:9;2394:1;2384:12;;;;;;;;:::i;:::-;:50;;;;:12;;;;;;;;;;;:50;2444:12;;2459:35;;2444:9;;2454:1;;2444:12;;;;;;:::i;:::-;:50;;;;:12;;;;;;;;;;:50;2535:60;;;;;;;;;2564:5;;;;2535:60;;;;;;;;2605:24;2535:60;2605:14;:24::i;:::-;2200:436;;2176:460::o;2161:134:272:-;2208:33;2272:16;2253:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2161:134;:::o;2930:133::-;2976:33;3040:16;3021:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2930:133;:::o;2631:141::-;2679:35;2747:18;2726:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2631:141;:::o;2822:193:193:-;2973:5;;:27;;;;;;;;2964:44;;2973:5;;;:25;;:27;;;;;;;;;;;;;;:5;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3002:5;2964:8;:44::i;:::-;2822:193::o;3227:218::-;3403:5;;:27;;;;;;;;3394:44;;3403:5;;;:25;;:27;;;;;;;;;;;;;;:5;:27;;;;;;;;;;;;;;2447:178:272;2503:48;2592:26;2563:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2447:178;:::o;2301:140::-;2349:34;2416:18;2395:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2778:146;2826:40;2899:18;2878:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:141;1915:34;1982:18;1961:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584:266;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:266;;;;;;;;1819:584::o;1869:528::-;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;5324:74:283;;;2221:17:266;5414:18:283;;;5407:34;2196:43:266;;;;;;;;;5297:18:283;;;2196:43:266;;;-1:-1:-1;;1671:64:266;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;;;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;2002:352;1980:374;2374:12;1819:584;-1:-1:-1;1819:584:266:o;2013:142:272:-;2062:35;2130:18;2109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2013:142;:::o;1477:137::-;1562:18;:45;;;;;;;-1:-1:-1;1562:45:272;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1477:137;:::o;789:312:268:-;859:1;854:6;;:1;:6;;;850:245;;881:41;;;;;6355:2:283;6337:21;;;6394:2;6374:18;;;6367:30;6433:34;6428:2;6413:18;;6406:62;6504:4;6499:2;6484:18;;6477:32;6541:3;6526:19;;6153:398;881:41:268;;;;;;;;941:52;972:1;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;941:52;;;;;;:::i;:::-;;;;;;;;1012;1043:1;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1012:52;;;;;;:::i;:::-;;;;;;;;1078:6;2990:42:266;2978:55;3059:16;2445:359;;2645:67;;;1671:64;2645:67;;;7672:74:283;;;2670:17:266;7762:18:283;;;7755:34;;;;2705:4:266;7805:18:283;;;7798:34;2482:11:266;;1671:64;2579:43;;7645:18:283;;2645:67:266;;;;;;;;;;;;;;2534:196;;;2645:67;2534:196;;:::i;:::-;;;;;;;;;;;;;;;2499:245;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2445:359:266;2813:7;:14;;;;;;;;2410:424::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:681:283;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:218;465:6;462:1;459:13;451:218;;;530:13;;545:42;526:62;514:75;;644:15;;;;609:12;;;;487:1;480:9;451:218;;;-1:-1:-1;686:3:283;;14:681;-1:-1:-1;;;;;;14:681:283:o;700:1699::-;906:4;935:2;975;964:9;960:18;1005:2;994:9;987:21;1028:6;1063;1057:13;1094:6;1086;1079:22;1120:2;1110:12;;1153:2;1142:9;1138:18;1131:25;;1215:2;1205:6;1202:1;1198:14;1187:9;1183:30;1179:39;1253:2;1245:6;1241:15;1274:1;1295;1305:1065;1321:6;1316:3;1313:15;1305:1065;;;1390:22;;;1414:66;1386:95;1374:108;;1505:13;;1592:9;;1603:42;1588:58;1573:74;;1686:11;;1680:18;1718:15;;;1711:27;;;1799:19;;1545:15;;;1831:24;;;1921:21;;;;1966:1;;1889:2;1877:15;;;1980:282;1996:8;1991:3;1988:17;1980:282;;;2077:15;;2094:66;2073:88;2059:103;;2231:17;;;;2024:1;2015:11;;;;;2188:14;;;;1980:282;;;-1:-1:-1;2348:12:283;;;;2285:5;-1:-1:-1;;;2313:15:283;;;;1347:1;1338:11;1305:1065;;;-1:-1:-1;2387:6:283;;700:1699;-1:-1:-1;;;;;;;;;700:1699:283:o;2404:258::-;2476:1;2486:113;2500:6;2497:1;2494:13;2486:113;;;2576:11;;;2570:18;2557:11;;;2550:39;2522:2;2515:10;2486:113;;;2617:6;2614:1;2611:13;2608:48;;;-1:-1:-1;;2652:1:283;2634:16;;2627:27;2404:258::o;2667:317::-;2709:3;2747:5;2741:12;2774:6;2769:3;2762:19;2790:63;2846:6;2839:4;2834:3;2830:14;2823:4;2816:5;2812:16;2790:63;:::i;:::-;2898:2;2886:15;2903:66;2882:88;2873:98;;;;2973:4;2869:109;;2667:317;-1:-1:-1;;2667:317:283:o;2989:862::-;3151:4;3180:2;3220;3209:9;3205:18;3250:2;3239:9;3232:21;3273:6;3308;3302:13;3339:6;3331;3324:22;3377:2;3366:9;3362:18;3355:25;;3439:2;3429:6;3426:1;3422:14;3411:9;3407:30;3403:39;3389:53;;3477:2;3469:6;3465:15;3498:1;3508:314;3522:6;3519:1;3516:13;3508:314;;;3611:66;3599:9;3591:6;3587:22;3583:95;3578:3;3571:108;3702:40;3735:6;3726;3720:13;3702:40;:::i;:::-;3692:50;-1:-1:-1;3800:12:283;;;;3765:15;;;;3544:1;3537:9;3508:314;;;-1:-1:-1;3839:6:283;;2989:862;-1:-1:-1;;;;;;;2989:862:283:o;4237:184::-;4289:77;4286:1;4279:88;4386:4;4383:1;4376:15;4410:4;4407:1;4400:15;4426:277;4493:6;4546:2;4534:9;4525:7;4521:23;4517:32;4514:52;;;4562:1;4559;4552:12;4514:52;4594:9;4588:16;4647:5;4640:13;4633:21;4626:5;4623:32;4613:60;;4669:1;4666;4659:12;4613:60;4692:5;4426:277;-1:-1:-1;;;4426:277:283:o;4708:437::-;4787:1;4783:12;;;;4830;;;4851:61;;4905:4;4897:6;4893:17;4883:27;;4851:61;4958:2;4950:6;4947:14;4927:18;4924:38;4921:218;;4995:77;4992:1;4985:88;5096:4;5093:1;5086:15;5124:4;5121:1;5114:15;4921:218;;4708:437;;;:::o;5452:417::-;5649:66;5641:6;5637:79;5632:3;5625:92;5607:3;5746:6;5740:13;5762:61;5816:6;5812:1;5807:3;5803:11;5796:4;5788:6;5784:17;5762:61;:::i;:::-;5843:16;;;;5861:1;5839:24;;5452:417;-1:-1:-1;;;5452:417:283:o;5874:274::-;6003:3;6041:6;6035:13;6057:53;6103:6;6098:3;6091:4;6083:6;6079:17;6057:53;:::i;:::-;6126:16;;;;;5874:274;-1:-1:-1;;5874:274:283:o;6556:452::-;6806:2;6795:9;6788:21;6845:2;6840;6829:9;6825:18;6818:30;6884:12;6879:2;6868:9;6864:18;6857:40;6935:3;6928:4;6917:9;6913:20;6906:33;6769:4;6956:46;6997:3;6986:9;6982:19;6974:6;6956:46;:::i;7013:452::-;7263:2;7252:9;7245:21;7302:2;7297;7286:9;7282:18;7275:30;7341:12;7336:2;7325:9;7321:18;7314:40;7392:3;7385:4;7374:9;7370:20;7363:33;7226:4;7413:46;7454:3;7443:9;7439:19;7431:6;7413:46;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "IS_TEST()": "fa7626d4",
    "excludeArtifacts()": "b5508aa9",
    "excludeContracts()": "e20c9f71",
    "excludeSenders()": "1ed7831c",
    "failed()": "ba414fa6",
    "invariant_round_trip_encoding_AToB()": "41c8965e",
    "invariant_round_trip_encoding_BToA()": "4d2cf653",
    "setUp()": "0a9254e4",
    "targetArtifactSelectors()": "66d9a9a0",
    "targetArtifacts()": "85226c81",
    "targetContracts()": "3f7286f4",
    "targetSelectors()": "916a17c6",
    "targetSenders()": "3e5e3c23"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invariant_round_trip_encoding_AToB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invariant_round_trip_encoding_BToA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"invariant_round_trip_encoding_AToB()\":{\"custom:invariant\":\"`convertRoundTripAToB` never fails. Asserts that a raw versioned nonce can be encoded / decoded to reach the same raw value.\"},\"invariant_round_trip_encoding_BToA()\":{\"custom:invariant\":\"`convertRoundTripBToA` never fails. Asserts that an encoded versioned nonce can always be decoded / re-encoded to reach the same encoded value.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/invariants/Encoding.t.sol\":\"Encoding_Invariant\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@cwia/=node_modules/clones-with-immutable-args/src/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@rari-capital/=node_modules/@rari-capital/\",\":@rari-capital/solmate/=node_modules/@rari-capital/solmate/\",\":clones-with-immutable-args/=node_modules/clones-with-immutable-args/\",\":ds-test/=node_modules/ds-test/src/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"contracts/libraries/Encoding.sol\":{\"keccak256\":\"0xb6908eada9896c172eb16ac196763fe82b07c595f424c19c1734ffd7cd437622\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://382ddbc903bf239dcd752f13cbc40cd271afd99323f2d11b8d7b20a069d257be\",\"dweb:/ipfs/QmeUbvEbwDoJV1ytiu4xUMReMePMYSHJ2m4mFPiidCGJrf\"]},\"contracts/libraries/Hashing.sol\":{\"keccak256\":\"0x2e232df6b4c6e30f33d8242b41848331285a0439227e80bd4e0a2d7d599ce06d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495ca371e91787525f421162ac77fb30e0887a8df0a6e36a79017e711f8496e4\",\"dweb:/ipfs/QmcJjNWwXiKeosTQRoRM1qjC2f8GUkrFNA8hwthoNedjsq\"]},\"contracts/libraries/Types.sol\":{\"keccak256\":\"0x75900d651301940d24c00d14f0b3b6cbd6dcf379173ceaa31d9bf5be934a9aa4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99c2632c5bf4fa3982391c32110eec9fa07917b483b2442cbaf18bdde5bdb24e\",\"dweb:/ipfs/QmSUs6Amkeootf5gKGbKi4mJpvhN2U8i1ED6ef2dskV5xc\"]},\"contracts/libraries/rlp/RLPWriter.sol\":{\"keccak256\":\"0x5aa9d21c5b41c9786f23153f819d561ae809a1d55c7b0d423dfeafdfbacedc78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://921c44e6a0982b9a4011900fda1bda2c06b7a85894967de98b407a83fe9f90c0\",\"dweb:/ipfs/QmSsHLKDUQ82kpKdqB6VntVGKuPDb4W9VdotsubuqWBzio\"]},\"contracts/test/invariants/Encoding.t.sol\":{\"keccak256\":\"0x35bdbaba20d329d872b09b3db59c2b0139cd25e2e64b96aefe841a3709a84e72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e21e32f6324349b0c35334931e30bfaa19b6ad75dc0b892c8b057461faa684c\",\"dweb:/ipfs/QmXC1gZxSvYmurRyvMmJHT6Mi6Y4BeMjTM52qawRCygKBr\"]},\"node_modules/ds-test/src/test.sol\":{\"keccak256\":\"0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5\",\"dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr\"]},\"node_modules/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"node_modules/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b\",\"dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL\"]},\"node_modules/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x9100bd38453711d5f5ae32d16b4aacef8d4e26abb3061fcc9920cd30cdb49315\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://114654e304083d3403510edd13d7df2223747337150ecf51dd36b441e50498f7\",\"dweb:/ipfs/QmQy6uvcVHyHzU2RbuvEo1hKiV7k81z21gR6DSj4DkCP8D\"]},\"node_modules/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb58d624eb0922d4ab14856efb0ab558b0727ccfc28448c5779f1ab4d98cf3daf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1869fc58cb27a7b680428b79d0e0b6f45bd3c61fedb4b3f895e143fb899519d5\",\"dweb:/ipfs/QmcjECGVpQPjhL2bokDyQeGWdzM99qPFMhq5r7KqKLot7R\"]},\"node_modules/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"node_modules/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0xd855e1fea6247f1bef118e2bee9f0039832988b7173fd17766bba4014ae26a3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c58c0f0b66852dfd3c76fb7958d8b023489d7a874c7cb1ad4f2021f9ec8ab477\",\"dweb:/ipfs/Qmd3MX9HAkNUhPddL29ekwhqgRnjAobZ35UzchaJZNACCN\"]},\"node_modules/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c\",\"dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV\"]},\"node_modules/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"node_modules/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5\",\"dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9\"]},\"node_modules/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x2882555b0f58e48144e46e9aa5118a506b31ad7485327d54e8f681e8b414c337\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2850bcb1322de9d9dd87ded42debbe0e8fc4048173788d4c00c98b50e5f76985\",\"dweb:/ipfs/QmUiPKnj7GZLLQbJGY7bVDu79Q9jGEYNjR5ZBgwFy8mH97\"]},\"node_modules/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x18ac6dcce9cdfe3bc754ce910b4b97e56963c49a92e50f57d055adb562416b86\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6b29b4a814dc26c3722e994a792f4cc1be86e6b8c2b2adc352ed54fb326593d\",\"dweb:/ipfs/Qma8a7XELNmUepiitaLyxJXW66urnXsvCwx1bMLmRw2Fpn\"]},\"node_modules/forge-std/src/Test.sol\":{\"keccak256\":\"0xddf16afce2bb7bbb69ed868d4c7ee8b4ea4ffbf8929427fe799682f107534945\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://52f6ebde2a4cb9d08aea5fb3d62b2f15961bb9a29d6d9e30dd0859d0d631cabf\",\"dweb:/ipfs/QmeJ9Dp1GYUggzjGiwTZkxCfB15NfyfgcyrNZL5tyWZbVZ\"]},\"node_modules/forge-std/src/Vm.sol\":{\"keccak256\":\"0xb5d4816a3f37977b1efa07b5e715daa917e96fd28dec1805c4189653db4ea33a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34338fa7f079f8d64f20d976f9bf908a710c8728f18c4b361b020b24fedfedf2\",\"dweb:/ipfs/QmYhwY1wi6vVLMUsJ32L3GiSR9HRaFhGL1Y3wRDjy41KXn\"]},\"node_modules/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"node_modules/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"node_modules/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "int256",
              "name": "",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "val",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_address",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "val",
              "type": "uint256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256[]",
              "name": "val",
              "type": "int256[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "val",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_array",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "val",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes32",
              "name": "val",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_bytes32",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_decimal_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "int256",
              "name": "val",
              "type": "int256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_int",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "val",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "val",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_named_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_string",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "log_uint",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "logs",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "IS_TEST",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "excludedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "excludeSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "excludedSenders_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "failed",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "invariant_round_trip_encoding_AToB"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "invariant_round_trip_encoding_BToA"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setUp"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifactSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedArtifactSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetArtifacts",
          "outputs": [
            {
              "internalType": "string[]",
              "name": "targetedArtifacts_",
              "type": "string[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetContracts",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedContracts_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSelectors",
          "outputs": [
            {
              "internalType": "struct StdInvariant.FuzzSelector[]",
              "name": "targetedSelectors_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "targetSenders",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "targetedSenders_",
              "type": "address[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "invariant_round_trip_encoding_AToB()": {
            "custom:invariant": "`convertRoundTripAToB` never fails. Asserts that a raw versioned nonce can be encoded / decoded to reach the same raw value."
          },
          "invariant_round_trip_encoding_BToA()": {
            "custom:invariant": "`convertRoundTripBToA` never fails. Asserts that an encoded versioned nonce can always be decoded / re-encoded to reach the same encoded value."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@cwia/=node_modules/clones-with-immutable-args/src/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        "@rari-capital/=node_modules/@rari-capital/",
        "@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
        "clones-with-immutable-args/=node_modules/clones-with-immutable-args/",
        "ds-test/=node_modules/ds-test/src/",
        "forge-std/=node_modules/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "contracts/test/invariants/Encoding.t.sol": "Encoding_Invariant"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/libraries/Encoding.sol": {
        "keccak256": "0xb6908eada9896c172eb16ac196763fe82b07c595f424c19c1734ffd7cd437622",
        "urls": [
          "bzz-raw://382ddbc903bf239dcd752f13cbc40cd271afd99323f2d11b8d7b20a069d257be",
          "dweb:/ipfs/QmeUbvEbwDoJV1ytiu4xUMReMePMYSHJ2m4mFPiidCGJrf"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Hashing.sol": {
        "keccak256": "0x2e232df6b4c6e30f33d8242b41848331285a0439227e80bd4e0a2d7d599ce06d",
        "urls": [
          "bzz-raw://495ca371e91787525f421162ac77fb30e0887a8df0a6e36a79017e711f8496e4",
          "dweb:/ipfs/QmcJjNWwXiKeosTQRoRM1qjC2f8GUkrFNA8hwthoNedjsq"
        ],
        "license": "MIT"
      },
      "contracts/libraries/Types.sol": {
        "keccak256": "0x75900d651301940d24c00d14f0b3b6cbd6dcf379173ceaa31d9bf5be934a9aa4",
        "urls": [
          "bzz-raw://99c2632c5bf4fa3982391c32110eec9fa07917b483b2442cbaf18bdde5bdb24e",
          "dweb:/ipfs/QmSUs6Amkeootf5gKGbKi4mJpvhN2U8i1ED6ef2dskV5xc"
        ],
        "license": "MIT"
      },
      "contracts/libraries/rlp/RLPWriter.sol": {
        "keccak256": "0x5aa9d21c5b41c9786f23153f819d561ae809a1d55c7b0d423dfeafdfbacedc78",
        "urls": [
          "bzz-raw://921c44e6a0982b9a4011900fda1bda2c06b7a85894967de98b407a83fe9f90c0",
          "dweb:/ipfs/QmSsHLKDUQ82kpKdqB6VntVGKuPDb4W9VdotsubuqWBzio"
        ],
        "license": "MIT"
      },
      "contracts/test/invariants/Encoding.t.sol": {
        "keccak256": "0x35bdbaba20d329d872b09b3db59c2b0139cd25e2e64b96aefe841a3709a84e72",
        "urls": [
          "bzz-raw://0e21e32f6324349b0c35334931e30bfaa19b6ad75dc0b892c8b057461faa684c",
          "dweb:/ipfs/QmXC1gZxSvYmurRyvMmJHT6Mi6Y4BeMjTM52qawRCygKBr"
        ],
        "license": "MIT"
      },
      "node_modules/ds-test/src/test.sol": {
        "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
        "urls": [
          "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
          "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/forge-std/src/Base.sol": {
        "keccak256": "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c",
        "urls": [
          "bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224",
          "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdAssertions.sol": {
        "keccak256": "0x1a0dee4d8b2c81e9318e87dd85ef009467ebf7dba6575530d1fce94d34dbae60",
        "urls": [
          "bzz-raw://ddd790c86ddde1013d1f7a552a80168eacf2e9244077f96799180644ad523a5b",
          "dweb:/ipfs/QmYinBFt9uEVFXP9ytT9CDoNpzWieQVgLWRFRNiypMzJaL"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdChains.sol": {
        "keccak256": "0x9100bd38453711d5f5ae32d16b4aacef8d4e26abb3061fcc9920cd30cdb49315",
        "urls": [
          "bzz-raw://114654e304083d3403510edd13d7df2223747337150ecf51dd36b441e50498f7",
          "dweb:/ipfs/QmQy6uvcVHyHzU2RbuvEo1hKiV7k81z21gR6DSj4DkCP8D"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdCheats.sol": {
        "keccak256": "0xb58d624eb0922d4ab14856efb0ab558b0727ccfc28448c5779f1ab4d98cf3daf",
        "urls": [
          "bzz-raw://1869fc58cb27a7b680428b79d0e0b6f45bd3c61fedb4b3f895e143fb899519d5",
          "dweb:/ipfs/QmcjECGVpQPjhL2bokDyQeGWdzM99qPFMhq5r7KqKLot7R"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdError.sol": {
        "keccak256": "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77",
        "urls": [
          "bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6",
          "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdInvariant.sol": {
        "keccak256": "0xd855e1fea6247f1bef118e2bee9f0039832988b7173fd17766bba4014ae26a3c",
        "urls": [
          "bzz-raw://c58c0f0b66852dfd3c76fb7958d8b023489d7a874c7cb1ad4f2021f9ec8ab477",
          "dweb:/ipfs/Qmd3MX9HAkNUhPddL29ekwhqgRnjAobZ35UzchaJZNACCN"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdJson.sol": {
        "keccak256": "0x9e2a7521190c462a0667706385f1c52a816220a9813ca8ac520fba7ba45d660b",
        "urls": [
          "bzz-raw://7d23017fe6570b28130a731b86179352b93a5fb5af32f11559837afc1186293c",
          "dweb:/ipfs/QmR3p6zG5Kmcr8gKocFCSopLHfXv1AziPJbH17nKyMxwxV"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdMath.sol": {
        "keccak256": "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2",
        "urls": [
          "bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92",
          "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdStorage.sol": {
        "keccak256": "0xd1517df281f973dba8b7ba52c02d3df552b60d91b8f47e4669049da648778673",
        "urls": [
          "bzz-raw://52e43264f58a5dcfd985f3c99aa81064805aa8f1c2b4c6521fd63d45cdbba8d5",
          "dweb:/ipfs/QmUMTF6cRjt5tCQrrgQDXVRmHQLjevNsTvLFdaA1m9TBj9"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdStyle.sol": {
        "keccak256": "0x2882555b0f58e48144e46e9aa5118a506b31ad7485327d54e8f681e8b414c337",
        "urls": [
          "bzz-raw://2850bcb1322de9d9dd87ded42debbe0e8fc4048173788d4c00c98b50e5f76985",
          "dweb:/ipfs/QmUiPKnj7GZLLQbJGY7bVDu79Q9jGEYNjR5ZBgwFy8mH97"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/StdUtils.sol": {
        "keccak256": "0x18ac6dcce9cdfe3bc754ce910b4b97e56963c49a92e50f57d055adb562416b86",
        "urls": [
          "bzz-raw://d6b29b4a814dc26c3722e994a792f4cc1be86e6b8c2b2adc352ed54fb326593d",
          "dweb:/ipfs/Qma8a7XELNmUepiitaLyxJXW66urnXsvCwx1bMLmRw2Fpn"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/Test.sol": {
        "keccak256": "0xddf16afce2bb7bbb69ed868d4c7ee8b4ea4ffbf8929427fe799682f107534945",
        "urls": [
          "bzz-raw://52f6ebde2a4cb9d08aea5fb3d62b2f15961bb9a29d6d9e30dd0859d0d631cabf",
          "dweb:/ipfs/QmeJ9Dp1GYUggzjGiwTZkxCfB15NfyfgcyrNZL5tyWZbVZ"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/Vm.sol": {
        "keccak256": "0xb5d4816a3f37977b1efa07b5e715daa917e96fd28dec1805c4189653db4ea33a",
        "urls": [
          "bzz-raw://34338fa7f079f8d64f20d976f9bf908a710c8728f18c4b361b020b24fedfedf2",
          "dweb:/ipfs/QmYhwY1wi6vVLMUsJ32L3GiSR9HRaFhGL1Y3wRDjy41KXn"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/console.sol": {
        "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
        "urls": [
          "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
          "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/console2.sol": {
        "keccak256": "0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea",
        "urls": [
          "bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973",
          "dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF"
        ],
        "license": "MIT"
      },
      "node_modules/forge-std/src/interfaces/IMulticall3.sol": {
        "keccak256": "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a",
        "urls": [
          "bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0",
          "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 114733,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "IS_TEST",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 114735,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_failed",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 124395,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "stdChainsInitialized",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 124416,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "chains",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Chain)124411_storage)"
      },
      {
        "astId": 124420,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "defaultRpcUrls",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 124424,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "idToAlias",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 124427,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "fallbackToDefaultRpcUrls",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 125093,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "gasMeteringOff",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 126806,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "stdstore",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(StdStorage)128292_storage"
      },
      {
        "astId": 116443,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_excludedContracts",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116446,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_excludedSenders",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116449,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_targetedContracts",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116452,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_targetedSenders",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 116455,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_excludedArtifacts",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 116458,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_targetedArtifacts",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 116462,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_targetedArtifactSelectors",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(FuzzSelector)116440_storage)dyn_storage"
      },
      {
        "astId": 116466,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "_targetedSelectors",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_struct(FuzzSelector)116440_storage)dyn_storage"
      },
      {
        "astId": 122939,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "stdstore",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(StdStorage)128292_storage"
      },
      {
        "astId": 101429,
        "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
        "label": "actor",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(Encoding_Converter)101422"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32",
        "base": "t_address"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32",
        "base": "t_bytes4"
      },
      "t_array(t_string_storage)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32",
        "base": "t_string_storage"
      },
      "t_array(t_struct(FuzzSelector)116440_storage)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "struct StdInvariant.FuzzSelector[]",
        "numberOfBytes": "32",
        "base": "t_struct(FuzzSelector)116440_storage"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(Encoding_Converter)101422": {
        "encoding": "inplace",
        "label": "contract Encoding_Converter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Chain)124411_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct StdChains.Chain)",
        "numberOfBytes": "32",
        "value": "t_struct(Chain)124411_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Chain)124411_storage": {
        "encoding": "inplace",
        "label": "struct StdChains.Chain",
        "numberOfBytes": "128",
        "members": [
          {
            "astId": 124404,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 124406,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 124408,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "chainAlias",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 124410,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "rpcUrl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ]
      },
      "t_struct(FuzzSelector)116440_storage": {
        "encoding": "inplace",
        "label": "struct StdInvariant.FuzzSelector",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 116436,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 116439,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "selectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ]
      },
      "t_struct(StdStorage)128292_storage": {
        "encoding": "inplace",
        "label": "struct StdStorage",
        "numberOfBytes": "224",
        "members": [
          {
            "astId": 128272,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "slots",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_uint256)))"
          },
          {
            "astId": 128280,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "finds",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_bool)))"
          },
          {
            "astId": 128283,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "_keys",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 128285,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "_sig",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes4"
          },
          {
            "astId": 128287,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "_depth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 128289,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "_target",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 128291,
            "contract": "contracts/test/invariants/Encoding.t.sol:Encoding_Invariant",
            "label": "_set",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user"
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "invariant_round_trip_encoding_AToB()": {},
      "invariant_round_trip_encoding_BToA()": {}
    }
  },
  "ast": {
    "absolutePath": "contracts/test/invariants/Encoding.t.sol",
    "id": 101515,
    "exportedSymbols": {
      "Encoding": [
        43021
      ],
      "Encoding_Converter": [
        101422
      ],
      "Encoding_Invariant": [
        101514
      ],
      "StdInvariant": [
        116655
      ],
      "Test": [
        117552
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:3416:193",
    "nodes": [
      {
        "id": 101325,
        "nodeType": "PragmaDirective",
        "src": "32:23:193",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 101327,
        "nodeType": "ImportDirective",
        "src": "57:42:193",
        "nodes": [],
        "absolutePath": "node_modules/forge-std/src/Test.sol",
        "file": "forge-std/Test.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 101515,
        "sourceUnit": 117553,
        "symbolAliases": [
          {
            "foreign": {
              "id": 101326,
              "name": "Test",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 117552,
              "src": "66:4:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 101329,
        "nodeType": "ImportDirective",
        "src": "100:58:193",
        "nodes": [],
        "absolutePath": "node_modules/forge-std/src/StdInvariant.sol",
        "file": "forge-std/StdInvariant.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 101515,
        "sourceUnit": 116656,
        "symbolAliases": [
          {
            "foreign": {
              "id": 101328,
              "name": "StdInvariant",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 116655,
              "src": "109:12:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 101331,
        "nodeType": "ImportDirective",
        "src": "159:56:193",
        "nodes": [],
        "absolutePath": "contracts/libraries/Encoding.sol",
        "file": "../../libraries/Encoding.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 101515,
        "sourceUnit": 43022,
        "symbolAliases": [
          {
            "foreign": {
              "id": 101330,
              "name": "Encoding",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 43021,
              "src": "168:8:193",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 101422,
        "nodeType": "ContractDefinition",
        "src": "217:1861:193",
        "nodes": [
          {
            "id": 101333,
            "nodeType": "VariableDeclaration",
            "src": "251:31:193",
            "nodes": [],
            "constant": false,
            "functionSelector": "54c03f25",
            "mutability": "mutable",
            "name": "failedRoundtripAToB",
            "nameLocation": "263:19:193",
            "scope": 101422,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 101332,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "251:4:193",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "id": 101335,
            "nodeType": "VariableDeclaration",
            "src": "288:31:193",
            "nodes": [],
            "constant": false,
            "functionSelector": "5e355239",
            "mutability": "mutable",
            "name": "failedRoundtripBToA",
            "nameLocation": "300:19:193",
            "scope": 101422,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 101334,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "288:4:193",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "id": 101382,
            "nodeType": "FunctionDefinition",
            "src": "576:618:193",
            "nodes": [],
            "body": {
              "id": 101381,
              "nodeType": "Block",
              "src": "648:546:193",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    101344
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101344,
                      "mutability": "mutable",
                      "name": "encodedVersionedNonce",
                      "nameLocation": "706:21:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101381,
                      "src": "698:29:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 101343,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "698:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101350,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 101347,
                        "name": "_nonce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101338,
                        "src": "760:6:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint240",
                          "typeString": "uint240"
                        }
                      },
                      {
                        "id": 101348,
                        "name": "_version",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101340,
                        "src": "768:8:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint240",
                          "typeString": "uint240"
                        },
                        {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      ],
                      "expression": {
                        "id": 101345,
                        "name": "Encoding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43021,
                        "src": "730:8:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Encoding_$43021_$",
                          "typeString": "type(library Encoding)"
                        }
                      },
                      "id": 101346,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeVersionedNonce",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 42998,
                      "src": "730:29:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint240_$_t_uint16_$returns$_t_uint256_$",
                        "typeString": "function (uint240,uint16) pure returns (uint256)"
                      }
                    },
                    "id": 101349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "730:47:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "698:79:193"
                },
                {
                  "assignments": [
                    101352
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101352,
                      "mutability": "mutable",
                      "name": "decodedNonce",
                      "nameLocation": "836:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101381,
                      "src": "828:20:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint240",
                        "typeString": "uint240"
                      },
                      "typeName": {
                        "id": 101351,
                        "name": "uint240",
                        "nodeType": "ElementaryTypeName",
                        "src": "828:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint240",
                          "typeString": "uint240"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101353,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "828:20:193"
                },
                {
                  "assignments": [
                    101355
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101355,
                      "mutability": "mutable",
                      "name": "decodedVersion",
                      "nameLocation": "865:14:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101381,
                      "src": "858:21:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 101354,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "858:6:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101356,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "858:21:193"
                },
                {
                  "expression": {
                    "id": 101364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        {
                          "id": 101357,
                          "name": "decodedNonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101352,
                          "src": "891:12:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint240",
                            "typeString": "uint240"
                          }
                        },
                        {
                          "id": 101358,
                          "name": "decodedVersion",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101355,
                          "src": "905:14:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        }
                      ],
                      "id": 101359,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "890:30:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint240_$_t_uint16_$",
                        "typeString": "tuple(uint240,uint16)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 101362,
                          "name": "encodedVersionedNonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101344,
                          "src": "953:21:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 101360,
                          "name": "Encoding",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43021,
                          "src": "923:8:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_Encoding_$43021_$",
                            "typeString": "type(library Encoding)"
                          }
                        },
                        "id": 101361,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "decodeVersionedNonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43020,
                        "src": "923:29:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint240_$_t_uint16_$",
                          "typeString": "function (uint256) pure returns (uint240,uint16)"
                        }
                      },
                      "id": 101363,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "923:52:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint240_$_t_uint16_$",
                        "typeString": "tuple(uint240,uint16)"
                      }
                    },
                    "src": "890:85:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101365,
                  "nodeType": "ExpressionStatement",
                  "src": "890:85:193"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 101374,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint240",
                            "typeString": "uint240"
                          },
                          "id": 101368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 101366,
                            "name": "decodedNonce",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101352,
                            "src": "1080:12:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint240",
                              "typeString": "uint240"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 101367,
                            "name": "_nonce",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101338,
                            "src": "1096:6:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint240",
                              "typeString": "uint240"
                            }
                          },
                          "src": "1080:22:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 101369,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1079:24:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          },
                          "id": 101372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 101370,
                            "name": "decodedVersion",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101355,
                            "src": "1108:14:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 101371,
                            "name": "_version",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101340,
                            "src": "1126:8:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "1108:26:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 101373,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "1107:28:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1079:56:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 101380,
                  "nodeType": "IfStatement",
                  "src": "1075:113:193",
                  "trueBody": {
                    "id": 101379,
                    "nodeType": "Block",
                    "src": "1137:51:193",
                    "statements": [
                      {
                        "expression": {
                          "id": 101377,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 101375,
                            "name": "failedRoundtripAToB",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101333,
                            "src": "1151:19:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 101376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1173:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "1151:26:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 101378,
                        "nodeType": "ExpressionStatement",
                        "src": "1151:26:193"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 101336,
              "nodeType": "StructuredDocumentation",
              "src": "326:245:193",
              "text": " @notice Takes a pair of integers to be encoded into a versioned nonce with the\n         Encoding library and then decoded and updates the test contract's state\n         indicating if the round trip encoding failed."
            },
            "functionSelector": "fac49bd5",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "convertRoundTripAToB",
            "nameLocation": "585:20:193",
            "parameters": {
              "id": 101341,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 101338,
                  "mutability": "mutable",
                  "name": "_nonce",
                  "nameLocation": "614:6:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 101382,
                  "src": "606:14:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint240",
                    "typeString": "uint240"
                  },
                  "typeName": {
                    "id": 101337,
                    "name": "uint240",
                    "nodeType": "ElementaryTypeName",
                    "src": "606:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint240",
                      "typeString": "uint240"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 101340,
                  "mutability": "mutable",
                  "name": "_version",
                  "nameLocation": "629:8:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 101382,
                  "src": "622:15:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 101339,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "622:6:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "605:33:193"
            },
            "returnParameters": {
              "id": 101342,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "648:0:193"
            },
            "scope": 101422,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 101421,
            "nodeType": "FunctionDefinition",
            "src": "1476:600:193",
            "nodes": [],
            "body": {
              "id": 101420,
              "nodeType": "Block",
              "src": "1540:536:193",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    101389
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101389,
                      "mutability": "mutable",
                      "name": "decodedNonce",
                      "nameLocation": "1598:12:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101420,
                      "src": "1590:20:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint240",
                        "typeString": "uint240"
                      },
                      "typeName": {
                        "id": 101388,
                        "name": "uint240",
                        "nodeType": "ElementaryTypeName",
                        "src": "1590:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint240",
                          "typeString": "uint240"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101390,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1590:20:193"
                },
                {
                  "assignments": [
                    101392
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101392,
                      "mutability": "mutable",
                      "name": "decodedVersion",
                      "nameLocation": "1627:14:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101420,
                      "src": "1620:21:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 101391,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "1620:6:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101393,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1620:21:193"
                },
                {
                  "expression": {
                    "id": 101401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        {
                          "id": 101394,
                          "name": "decodedNonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101389,
                          "src": "1653:12:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint240",
                            "typeString": "uint240"
                          }
                        },
                        {
                          "id": 101395,
                          "name": "decodedVersion",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101392,
                          "src": "1667:14:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        }
                      ],
                      "id": 101396,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "1652:30:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint240_$_t_uint16_$",
                        "typeString": "tuple(uint240,uint16)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 101399,
                          "name": "_versionedNonce",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101385,
                          "src": "1715:15:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 101397,
                          "name": "Encoding",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43021,
                          "src": "1685:8:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_Encoding_$43021_$",
                            "typeString": "type(library Encoding)"
                          }
                        },
                        "id": 101398,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "decodeVersionedNonce",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43020,
                        "src": "1685:29:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint240_$_t_uint16_$",
                          "typeString": "function (uint256) pure returns (uint240,uint16)"
                        }
                      },
                      "id": 101400,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1685:46:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_uint240_$_t_uint16_$",
                        "typeString": "tuple(uint240,uint16)"
                      }
                    },
                    "src": "1652:79:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101402,
                  "nodeType": "ExpressionStatement",
                  "src": "1652:79:193"
                },
                {
                  "assignments": [
                    101404
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101404,
                      "mutability": "mutable",
                      "name": "encodedVersionedNonce",
                      "nameLocation": "1790:21:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101420,
                      "src": "1782:29:193",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 101403,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1782:7:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101410,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 101407,
                        "name": "decodedNonce",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101389,
                        "src": "1844:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint240",
                          "typeString": "uint240"
                        }
                      },
                      {
                        "id": 101408,
                        "name": "decodedVersion",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101392,
                        "src": "1858:14:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint240",
                          "typeString": "uint240"
                        },
                        {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      ],
                      "expression": {
                        "id": 101405,
                        "name": "Encoding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 43021,
                        "src": "1814:8:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Encoding_$43021_$",
                          "typeString": "type(library Encoding)"
                        }
                      },
                      "id": 101406,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "encodeVersionedNonce",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 42998,
                      "src": "1814:29:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint240_$_t_uint16_$returns$_t_uint256_$",
                        "typeString": "function (uint240,uint16) pure returns (uint256)"
                      }
                    },
                    "id": 101409,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1814:59:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1782:91:193"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 101413,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 101411,
                      "name": "encodedVersionedNonce",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 101404,
                      "src": "1977:21:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 101412,
                      "name": "_versionedNonce",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 101385,
                      "src": "2002:15:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1977:40:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 101419,
                  "nodeType": "IfStatement",
                  "src": "1973:97:193",
                  "trueBody": {
                    "id": 101418,
                    "nodeType": "Block",
                    "src": "2019:51:193",
                    "statements": [
                      {
                        "expression": {
                          "id": 101416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 101414,
                            "name": "failedRoundtripBToA",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101335,
                            "src": "2033:19:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 101415,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2055:4:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "2033:26:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 101417,
                        "nodeType": "ExpressionStatement",
                        "src": "2033:26:193"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 101383,
              "nodeType": "StructuredDocumentation",
              "src": "1200:271:193",
              "text": " @notice Takes an integer representing a packed version and nonce and attempts\n         to decode them using the Encoding library before re-encoding and updates\n         the test contract's state indicating if the round trip encoding failed."
            },
            "functionSelector": "871c9fbc",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "convertRoundTripBToA",
            "nameLocation": "1485:20:193",
            "parameters": {
              "id": 101386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 101385,
                  "mutability": "mutable",
                  "name": "_versionedNonce",
                  "nameLocation": "1514:15:193",
                  "nodeType": "VariableDeclaration",
                  "scope": 101421,
                  "src": "1506:23:193",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 101384,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1506:7:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1505:25:193"
            },
            "returnParameters": {
              "id": 101387,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1540:0:193"
            },
            "scope": 101422,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Encoding_Converter",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          101422
        ],
        "name": "Encoding_Converter",
        "nameLocation": "226:18:193",
        "scope": 101515,
        "usedErrors": []
      },
      {
        "id": 101514,
        "nodeType": "ContractDefinition",
        "src": "2080:1367:193",
        "nodes": [
          {
            "id": 101429,
            "nodeType": "VariableDeclaration",
            "src": "2136:33:193",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "actor",
            "nameLocation": "2164:5:193",
            "scope": 101514,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
              "typeString": "contract Encoding_Converter"
            },
            "typeName": {
              "id": 101428,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 101427,
                "name": "Encoding_Converter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 101422,
                "src": "2136:18:193"
              },
              "referencedDeclaration": 101422,
              "src": "2136:18:193",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                "typeString": "contract Encoding_Converter"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 101489,
            "nodeType": "FunctionDefinition",
            "src": "2176:460:193",
            "nodes": [],
            "body": {
              "id": 101488,
              "nodeType": "Block",
              "src": "2200:436:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 101437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 101432,
                      "name": "actor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 101429,
                      "src": "2247:5:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                        "typeString": "contract Encoding_Converter"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 101435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2255:22:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Encoding_Converter_$101422_$",
                          "typeString": "function () returns (contract Encoding_Converter)"
                        },
                        "typeName": {
                          "id": 101434,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 101433,
                            "name": "Encoding_Converter",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 101422,
                            "src": "2259:18:193"
                          },
                          "referencedDeclaration": 101422,
                          "src": "2259:18:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                            "typeString": "contract Encoding_Converter"
                          }
                        }
                      },
                      "id": 101436,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2255:24:193",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                        "typeString": "contract Encoding_Converter"
                      }
                    },
                    "src": "2247:32:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                      "typeString": "contract Encoding_Converter"
                    }
                  },
                  "id": 101438,
                  "nodeType": "ExpressionStatement",
                  "src": "2247:32:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 101442,
                            "name": "actor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101429,
                            "src": "2313:5:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                              "typeString": "contract Encoding_Converter"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                              "typeString": "contract Encoding_Converter"
                            }
                          ],
                          "id": 101441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2305:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 101440,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2305:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 101443,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2305:14:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 101439,
                      "name": "targetContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116539,
                      "src": "2290:14:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 101444,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2290:30:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101445,
                  "nodeType": "ExpressionStatement",
                  "src": "2290:30:193"
                },
                {
                  "assignments": [
                    101450
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101450,
                      "mutability": "mutable",
                      "name": "selectors",
                      "nameLocation": "2347:9:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101488,
                      "src": "2331:25:193",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                        "typeString": "bytes4[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 101448,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "2331:6:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 101449,
                        "nodeType": "ArrayTypeName",
                        "src": "2331:8:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                          "typeString": "bytes4[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101456,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "32",
                        "id": 101454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2372:1:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        }
                      ],
                      "id": 101453,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "2359:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes4_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (bytes4[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 101451,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "2363:6:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 101452,
                        "nodeType": "ArrayTypeName",
                        "src": "2363:8:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_storage_ptr",
                          "typeString": "bytes4[]"
                        }
                      }
                    },
                    "id": 101455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2359:15:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                      "typeString": "bytes4[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2331:43:193"
                },
                {
                  "expression": {
                    "id": 101463,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 101457,
                        "name": "selectors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101450,
                        "src": "2384:9:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                          "typeString": "bytes4[] memory"
                        }
                      },
                      "id": 101459,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 101458,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2394:1:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2384:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "expression": {
                          "id": 101460,
                          "name": "actor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101429,
                          "src": "2399:5:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                            "typeString": "contract Encoding_Converter"
                          }
                        },
                        "id": 101461,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "convertRoundTripAToB",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 101382,
                        "src": "2399:26:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_uint240_$_t_uint16_$returns$__$",
                          "typeString": "function (uint240,uint16) external"
                        }
                      },
                      "id": 101462,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "selector",
                      "nodeType": "MemberAccess",
                      "src": "2399:35:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "2384:50:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "id": 101464,
                  "nodeType": "ExpressionStatement",
                  "src": "2384:50:193"
                },
                {
                  "expression": {
                    "id": 101471,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 101465,
                        "name": "selectors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101450,
                        "src": "2444:9:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                          "typeString": "bytes4[] memory"
                        }
                      },
                      "id": 101467,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 101466,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2454:1:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2444:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "expression": {
                          "id": 101468,
                          "name": "actor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101429,
                          "src": "2459:5:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                            "typeString": "contract Encoding_Converter"
                          }
                        },
                        "id": 101469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "convertRoundTripBToA",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 101421,
                        "src": "2459:26:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                          "typeString": "function (uint256) external"
                        }
                      },
                      "id": 101470,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "selector",
                      "nodeType": "MemberAccess",
                      "src": "2459:35:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "2444:50:193",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "id": 101472,
                  "nodeType": "ExpressionStatement",
                  "src": "2444:50:193"
                },
                {
                  "assignments": [
                    101475
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 101475,
                      "mutability": "mutable",
                      "name": "selector",
                      "nameLocation": "2524:8:193",
                      "nodeType": "VariableDeclaration",
                      "scope": 101488,
                      "src": "2504:28:193",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FuzzSelector_$116440_memory_ptr",
                        "typeString": "struct StdInvariant.FuzzSelector"
                      },
                      "typeName": {
                        "id": 101474,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 101473,
                          "name": "FuzzSelector",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 116440,
                          "src": "2504:12:193"
                        },
                        "referencedDeclaration": 116440,
                        "src": "2504:12:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FuzzSelector_$116440_storage_ptr",
                          "typeString": "struct StdInvariant.FuzzSelector"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 101483,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 101479,
                            "name": "actor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101429,
                            "src": "2564:5:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                              "typeString": "contract Encoding_Converter"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                              "typeString": "contract Encoding_Converter"
                            }
                          ],
                          "id": 101478,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2556:7:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 101477,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2556:7:193",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 101480,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2556:14:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 101481,
                        "name": "selectors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101450,
                        "src": "2583:9:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                          "typeString": "bytes4[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_bytes4_$dyn_memory_ptr",
                          "typeString": "bytes4[] memory"
                        }
                      ],
                      "id": 101476,
                      "name": "FuzzSelector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116440,
                      "src": "2535:12:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_struct$_FuzzSelector_$116440_storage_ptr_$",
                        "typeString": "type(struct StdInvariant.FuzzSelector storage pointer)"
                      }
                    },
                    "id": 101482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "structConstructorCall",
                    "lValueRequested": false,
                    "names": [
                      "addr",
                      "selectors"
                    ],
                    "nodeType": "FunctionCall",
                    "src": "2535:60:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FuzzSelector_$116440_memory_ptr",
                      "typeString": "struct StdInvariant.FuzzSelector memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2504:91:193"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 101485,
                        "name": "selector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 101475,
                        "src": "2620:8:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FuzzSelector_$116440_memory_ptr",
                          "typeString": "struct StdInvariant.FuzzSelector memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_FuzzSelector_$116440_memory_ptr",
                          "typeString": "struct StdInvariant.FuzzSelector memory"
                        }
                      ],
                      "id": 101484,
                      "name": "targetSelector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116552,
                      "src": "2605:14:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_FuzzSelector_$116440_memory_ptr_$returns$__$",
                        "typeString": "function (struct StdInvariant.FuzzSelector memory)"
                      }
                    },
                    "id": 101486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2605:24:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101487,
                  "nodeType": "ExpressionStatement",
                  "src": "2605:24:193"
                }
              ]
            },
            "functionSelector": "0a9254e4",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setUp",
            "nameLocation": "2185:5:193",
            "parameters": {
              "id": 101430,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2190:2:193"
            },
            "returnParameters": {
              "id": 101431,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2200:0:193"
            },
            "scope": 101514,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 101501,
            "nodeType": "FunctionDefinition",
            "src": "2822:193:193",
            "nodes": [],
            "body": {
              "id": 101500,
              "nodeType": "Block",
              "src": "2877:138:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 101494,
                            "name": "actor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101429,
                            "src": "2973:5:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                              "typeString": "contract Encoding_Converter"
                            }
                          },
                          "id": 101495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "failedRoundtripAToB",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 101333,
                          "src": "2973:25:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                            "typeString": "function () view external returns (bool)"
                          }
                        },
                        "id": 101496,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2973:27:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 101497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3002:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 101493,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        123071,
                        123096,
                        123109,
                        123125,
                        123167,
                        123209,
                        123251,
                        123288,
                        123325,
                        123362,
                        114965,
                        114990,
                        115020,
                        115045,
                        115104,
                        115129,
                        115159,
                        115184,
                        116284,
                        116319
                      ],
                      "referencedDeclaration": 123071,
                      "src": "2964:8:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$_t_bool_$returns$__$",
                        "typeString": "function (bool,bool)"
                      }
                    },
                    "id": 101498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2964:44:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101499,
                  "nodeType": "ExpressionStatement",
                  "src": "2964:44:193"
                }
              ]
            },
            "documentation": {
              "id": 101490,
              "nodeType": "StructuredDocumentation",
              "src": "2642:175:193",
              "text": " @custom:invariant `convertRoundTripAToB` never fails.\n Asserts that a raw versioned nonce can be encoded / decoded to reach the same raw value."
            },
            "functionSelector": "41c8965e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "invariant_round_trip_encoding_AToB",
            "nameLocation": "2831:34:193",
            "parameters": {
              "id": 101491,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2865:2:193"
            },
            "returnParameters": {
              "id": 101492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2877:0:193"
            },
            "scope": 101514,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 101513,
            "nodeType": "FunctionDefinition",
            "src": "3227:218:193",
            "nodes": [],
            "body": {
              "id": 101512,
              "nodeType": "Block",
              "src": "3282:163:193",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 101506,
                            "name": "actor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101429,
                            "src": "3403:5:193",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Encoding_Converter_$101422",
                              "typeString": "contract Encoding_Converter"
                            }
                          },
                          "id": 101507,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "failedRoundtripBToA",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 101335,
                          "src": "3403:25:193",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                            "typeString": "function () view external returns (bool)"
                          }
                        },
                        "id": 101508,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3403:27:193",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 101509,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3432:5:193",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 101505,
                      "name": "assertEq",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        123071,
                        123096,
                        123109,
                        123125,
                        123167,
                        123209,
                        123251,
                        123288,
                        123325,
                        123362,
                        114965,
                        114990,
                        115020,
                        115045,
                        115104,
                        115129,
                        115159,
                        115184,
                        116284,
                        116319
                      ],
                      "referencedDeclaration": 123071,
                      "src": "3394:8:193",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bool_$_t_bool_$returns$__$",
                        "typeString": "function (bool,bool)"
                      }
                    },
                    "id": 101510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3394:44:193",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101511,
                  "nodeType": "ExpressionStatement",
                  "src": "3394:44:193"
                }
              ]
            },
            "documentation": {
              "id": 101502,
              "nodeType": "StructuredDocumentation",
              "src": "3021:201:193",
              "text": " @custom:invariant `convertRoundTripBToA` never fails.\n Asserts that an encoded versioned nonce can always be decoded / re-encoded to reach\n the same encoded value."
            },
            "functionSelector": "4d2cf653",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "invariant_round_trip_encoding_BToA",
            "nameLocation": "3236:34:193",
            "parameters": {
              "id": 101503,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3270:2:193"
            },
            "returnParameters": {
              "id": 101504,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3282:0:193"
            },
            "scope": 101514,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 101423,
              "name": "StdInvariant",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 116655,
              "src": "2111:12:193"
            },
            "id": 101424,
            "nodeType": "InheritanceSpecifier",
            "src": "2111:12:193"
          },
          {
            "baseName": {
              "id": 101425,
              "name": "Test",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 117552,
              "src": "2125:4:193"
            },
            "id": 101426,
            "nodeType": "InheritanceSpecifier",
            "src": "2125:4:193"
          }
        ],
        "canonicalName": "Encoding_Invariant",
        "contractDependencies": [
          101422
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          101514,
          117552,
          122943,
          122940,
          117503,
          116655,
          127476,
          126797,
          125064,
          124370,
          116431
        ],
        "name": "Encoding_Invariant",
        "nameLocation": "2089:18:193",
        "scope": 101515,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 193
}